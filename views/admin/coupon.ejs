<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coupon Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  </head>

<%- include("../../views/partials/admin/header") %>

<body class="bg-gray-50">
    <div class="container mx-auto px-4 py-8">
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold">Coupon Management</h1>
        <button class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700" onclick="openCreateCouponModal()">
            <i class="fas fa-plus mr-2"></i>Create Coupon
        </button>
      </div>

      <!-- Search Section -->
      <div class="bg-white p-6 rounded-lg shadow mb-6">
        <div class="flex gap-4">
          <input type="text" id="searchInput" placeholder="Search coupons..." 
                 class="flex-1 px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
          <select class="px-4 py-2 border rounded">
            <option value="all">All Status</option>
            <option value="active">Active</option>
            <option value="expired">Expired</option>
          </select>
        </div>
      </div>

      <!-- Coupons Table -->
      <div class="bg-white rounded-lg shadow overflow-hidden">
        <table class="w-full">
          <thead class="bg-gray-800 text-white">
            <tr>
              <th class="px-4 py-3 text-left">No.</th>
              <th class="px-4 py-3 text-left">Code</th>
              <th class="px-4 py-3 text-left">Description</th>
              <th class="px-4 py-3 text-right">Discount</th>
              <th class="px-4 py-3 text-center">Min Purchase</th>
              <th class="px-4 py-3 text-center">Valid From</th>
              <th class="px-4 py-3 text-center">Valid Until</th>
              <th class="px-4 py-3 text-center">Status</th>
              <th class="px-4 py-3 text-center">Actions</th>
            </tr>
          </thead>
          <tbody>
            <% coupons.forEach((coupon, index) => { 
              const isExpired = new Date(coupon.validUntil) < new Date(); 
              const status = isExpired ? 'Expired' : 'Active';
              const statusClass = isExpired ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800';
            %>
            <tr class="border-b hover:bg-gray-100">
              <td class="px-4 py-3"><%= index + 1 %></td>
              <td class="px-4 py-3"><%= coupon.code %></td>
              <td class="px-4 py-3"><%= coupon.description %></td>
              <td class="px-4 py-3 text-right">
                <%= coupon.discountType === 'percentage' ? `${coupon.discountAmount}%` : `₹${coupon.discountAmount}` %>
              </td>
              <td class="px-4 py-3 text-center">₹<%= coupon.minPurchase %></td>
              <td class="px-4 py-3 text-center"><%= new Date(coupon.validFrom).toLocaleDateString() %></td>
              <td class="px-4 py-3 text-center"><%= new Date(coupon.validUntil).toLocaleDateString() %></td>
              <td class="px-4 py-3 text-center">
                <span class="px-2 py-1 rounded-full text-xs <%= statusClass %>">
                  <%= status %>
                </span>
              </td>
              <td class="px-4 py-3 text-center">
                <div class="flex justify-center space-x-3">
                  <button class="text-blue-500 hover:text-blue-700" title="Edit" 
                          onclick="openEditCouponModal('<%= coupon._id %>')">
                      <i class="fas fa-edit"></i>
                  </button>
                  <button class="text-red-500 hover:text-red-700" title="Delete" 
                          onclick="deleteCoupon('<%= coupon._id %>')">
                      <i class="fas fa-trash"></i>
                  </button>
                </div>
              </td>
            </tr>
            <% }); %>
          </tbody>
        </table>

        <!-- Pagination -->
        <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200">
          <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
              <p class="text-sm text-gray-700">
                Showing
                <span class="font-medium"><%= ((currentPage - 1) * 10) + 1 %></span>
                to
                <span class="font-medium"><%= Math.min(currentPage * 10, totalCoupons) %></span>
                of
                <span class="font-medium"><%= totalCoupons %></span>
                coupons
              </p>
            </div>
            <div>
              <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                <% if (currentPage > 1) { %>
                  <a href="?page=<%= currentPage - 1 %>" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                    <span class="sr-only">Previous</span>
                    <i class="fas fa-chevron-left"></i>
                  </a>
                <% } else { %>
                  <span class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-gray-100 text-sm font-medium text-gray-400">
                    <span class="sr-only">Previous</span>
                    <i class="fas fa-chevron-left"></i>
                  </span>
                <% } %>

                <% for(let i = 1; i <= totalPages; i++) { %>
                  <% if (i === currentPage) { %>
                    <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-blue-50 text-sm font-medium text-blue-600">
                      <%= i %>
                    </span>
                  <% } else { %>
                    <a href="?page=<%= i %>" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                      <%= i %>
                    </a>
                  <% } %>
                <% } %>

                <% if (currentPage < totalPages) { %>
                  <a href="?page=<%= currentPage + 1 %>" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                    <span class="sr-only">Next</span>
                    <i class="fas fa-chevron-right"></i>
                  </a>
                <% } else { %>
                  <span class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-gray-100 text-sm font-medium text-gray-400">
                    <span class="sr-only">Next</span>
                    <i class="fas fa-chevron-right"></i>
                  </span>
                <% } %>
              </nav>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Create Coupon Modal -->
    <div id="createCouponModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
        <div class="flex items-center justify-center min-h-screen">
            <div class="bg-white rounded-lg shadow-xl w-96 p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-bold">Create New Coupon</h2>
                    <button onclick="closeCreateCouponModal()" class="text-gray-600 hover:text-gray-900">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="createCouponForm">
                    <div class="space-y-4">
                      <div>
                        <label class="block text-sm font-medium text-gray-700">Coupon Code</label>
                        <input type="text" name="code" required
                               class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                    </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Description</label>
                            <textarea name="description" required
                                      class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"></textarea>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Discount Type</label>
                            <select name="discountType" required
                                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                <option value="percentage">Percentage</option>
                                <option value="fixed">Fixed Amount</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Discount Amount</label>
                            <input type="number" name="discountAmount" required min="1" max="90"
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Minimum Purchase Amount</label>
                            <input type="number" name="minPurchase" required
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Valid From</label>
                            <input type="date" name="validFrom" required
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Valid Until</label>
                            <input type="date" name="validUntil" required
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Max Usage Per User</label>
                            <input type="number" name="maxUsagePerUser" required min="1" value="1"
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Total Usage Limit</label>
                            <input type="number" name="totalUsageLimit" required min="1"
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div class="flex justify-end space-x-3">
                            <button type="button" onclick="closeCreateCouponModal()"
                                    class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
                                Cancel
                            </button>
                            <button type="submit"
                                    class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                                Create Coupon
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Coupon Modal -->
    <div id="editCouponModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
        <div class="flex items-center justify-center min-h-screen">
            <div class="bg-white rounded-lg shadow-xl w-96 p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-bold">Edit Coupon</h2>
                    <button onclick="closeEditCouponModal()" class="text-gray-600 hover:text-gray-900">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="editCouponForm">
                    <input type="hidden" id="editCouponId" name="couponId">
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Coupon Code</label>
                            <input type="text" id="editCode" name="code" required
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Description</label>
                            <textarea id="editDescription" name="description" required
                                      class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"></textarea>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Discount Type</label>
                            <select id="editDiscountType" name="discountType" required
                                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                <option value="percentage">Percentage</option>
                                <option value="fixed">Fixed Amount</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Discount Amount</label>
                            <input type="number" id="editDiscountAmount" name="discountAmount" required min="1" max="90"
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Minimum Purchase Amount</label>
                            <input type="number" id="editMinPurchase" name="minPurchase" required
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Valid From</label>
                            <input type="date" id="editValidFrom" name="validFrom" required
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Valid Until</label>
                            <input type="date" id="editValidUntil" name="validUntil" required
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Max Usage Per User</label>
                            <input type="number" id="editMaxUsagePerUser" name="maxUsagePerUser" required min="1"
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Total Usage Limit</label>
                            <input type="number" id="editTotalUsageLimit" name="totalUsageLimit" required min="1"
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div class="flex justify-end space-x-3">
                            <button type="button" onclick="closeEditCouponModal()"
                                    class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
                                Cancel
                            </button>
                            <button type="submit"
                                    class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                                Update Coupon
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Search and modal functions
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');
            const statusSelect = document.querySelector('select');
            const tbody = document.querySelector('tbody');
            const rows = tbody.querySelectorAll('tr');

            function filterCoupons() {
                const searchTerm = searchInput.value.toLowerCase();
                const selectedStatus = statusSelect.value.toLowerCase();

                rows.forEach(row => {
                    const code = row.children[1].textContent.toLowerCase();
                    const description = row.children[2].textContent.toLowerCase();
                    const status = row.children[7].textContent.toLowerCase().trim();

                    const matchesSearch = code.includes(searchTerm) || description.includes(searchTerm);
                    const matchesStatus = selectedStatus === 'all' || status === selectedStatus;

                    row.style.display = matchesSearch && matchesStatus ? '' : 'none';
                });
            }

            searchInput.addEventListener('input', filterCoupons);
            statusSelect.addEventListener('change', filterCoupons);
        });

        // Modal functions
        function openCreateCouponModal() {
            document.getElementById('createCouponModal').classList.remove('hidden');
        }

        function closeCreateCouponModal() {
            document.getElementById('createCouponModal').classList.add('hidden');
        }

        async function openEditCouponModal(couponId) {
            try {
                const response = await fetch(`/admin/coupons/${couponId}`);
                const data = await response.json();
                
                if (data.status === 'success') {
                    const coupon = data.data;
                    
                    // Populate the form fields with coupon data
                    document.getElementById('editCouponId').value = coupon._id;
                    document.getElementById('editCode').value = coupon.code;
                    document.getElementById('editDescription').value = coupon.description;
                    document.getElementById('editDiscountType').value = coupon.discountType;
                    document.getElementById('editDiscountAmount').value = coupon.discountAmount;
                    document.getElementById('editMinPurchase').value = coupon.minPurchase;
                    
                    // Format dates for the date inputs
                    const validFrom = new Date(coupon.validFrom).toISOString().split('T')[0];
                    const validUntil = new Date(coupon.validUntil).toISOString().split('T')[0];
                    
                    document.getElementById('editValidFrom').value = validFrom;
                    document.getElementById('editValidUntil').value = validUntil;
                    document.getElementById('editMaxUsagePerUser').value = coupon.maxUsagePerUser;
                    document.getElementById('editTotalUsageLimit').value = coupon.totalUsageLimit;
                    
                    // Show the modal
                    document.getElementById('editCouponModal').classList.remove('hidden');
                } else {
                    throw new Error(data.message || 'Failed to load coupon details');
                }
            } catch (error) {
                console.error('Error loading coupon details:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to load coupon details'
                });
            }
        }

        function closeEditCouponModal() {
            document.getElementById('editCouponModal').classList.add('hidden');
        }

        // Add these validation helper functions
        function showError(inputElement, message) {
            // Remove any existing error message
            removeError(inputElement);
            
            // Add error class to input
            inputElement.classList.add('border-red-500');
            
            // Create and insert error message
            const errorDiv = document.createElement('div');
            errorDiv.className = 'text-red-500 text-sm mt-1';
            errorDiv.textContent = message;
            inputElement.parentNode.appendChild(errorDiv);
        }

        function removeError(inputElement) {
            // Remove error class
            inputElement.classList.remove('border-red-500');
            
            // Remove error message if it exists
            const errorDiv = inputElement.parentNode.querySelector('.text-red-500');
            if (errorDiv) {
                errorDiv.remove();
            }
        }

        function validateInput(input, validationRules) {
            const value = input.value.trim();
            removeError(input);

            switch(validationRules.type) {
                case 'text':
                    if (!value) {
                        showError(input, `${validationRules.name} is required`);
                        return false;
                    }
                    if (validationRules.minLength && value.length < validationRules.minLength) {
                        showError(input, `${validationRules.name} must be at least ${validationRules.minLength} characters`);
                        return false;
                    }
                    break;

                case 'number':
                    const numValue = Number(value);
                    if (isNaN(numValue)) {
                        showError(input, `${validationRules.name} must be a valid number`);
                        return false;
                    }
                    if (validationRules.min !== undefined && numValue < validationRules.min) {
                        showError(input, `${validationRules.name} must be at least ${validationRules.min}`);
                        return false;
                    }
                    if (validationRules.max !== undefined && numValue > validationRules.max) {
                        showError(input, `${validationRules.name} must be ${validationRules.max} or less`);
                        return false;
                    }
                    break;

                case 'date':
                    const dateValue = new Date(value);
                    const currentDate = new Date();
                    // Reset time part for accurate date comparison
                    currentDate.setHours(0, 0, 0, 0);
                    
                    if (isNaN(dateValue.getTime())) {
                        showError(input, `Please enter a valid date for ${validationRules.name}`);
                        return false;
                    }

                    if (validationRules.startDate) {
                        if (dateValue < currentDate) {
                            showError(input, `Start date cannot be in the past`);
                            return false;
                        }
                    }

                    if (validationRules.compareWith) {
                        const compareDate = new Date(validationRules.compareWith.value);
                        if (validationRules.compareWith.type === 'after' && dateValue <= compareDate) {
                            showError(input, validationRules.compareWith.message);
                            return false;
                        }
                        if (validationRules.compareWith.type === 'before' && dateValue >= compareDate) {
                            showError(input, validationRules.compareWith.message);
                            return false;
                        }
                    }
                    break;
            }

            return true;
        }

        // Update the form validation function
        function validateCouponForm(form, isEdit = false) {
            let isValid = true;
            const prefix = isEdit ? 'edit' : '';

            // Validate code
            const codeInput = form.querySelector(`#${prefix}Code`);
            isValid = validateInput(codeInput, {
                type: 'text',
                name: 'Coupon code',
                minLength: 3
            }) && isValid;

            // Validate description
            const descInput = form.querySelector(`#${prefix}Description`);
            isValid = validateInput(descInput, {
                type: 'text',
                name: 'Description',
                minLength: 10
            }) && isValid;

            // Validate discount amount
            const discountTypeSelect = form.querySelector(`#${prefix}DiscountType`);
            const discountAmountInput = form.querySelector(`#${prefix}DiscountAmount`);
            const isPercentage = discountTypeSelect.value === 'percentage';
            
            isValid = validateInput(discountAmountInput, {
                type: 'number',
                name: 'Discount amount',
                min: 0,
                max: isPercentage ? 90 : undefined
            }) && isValid;

            // Validate minimum purchase
            const minPurchaseInput = form.querySelector(`#${prefix}MinPurchase`);
            isValid = validateInput(minPurchaseInput, {
                type: 'number',
                name: 'Minimum purchase amount',
                min: 0
            }) && isValid;

            // Validate dates
            const validFromInput = form.querySelector(`#${prefix}ValidFrom`);
            const validUntilInput = form.querySelector(`#${prefix}ValidUntil`);
            
            // First validate the start date
            isValid = validateInput(validFromInput, {
                type: 'date',
                name: 'Valid from date',
                startDate: true // This indicates it should be current or future date
            }) && isValid;
            
            // Then validate the end date in relation to the start date
            if (validFromInput.value) {
                isValid = validateInput(validUntilInput, {
                    type: 'date',
                    name: 'Valid until date',
                    compareWith: {
                        value: validFromInput.value,
                        type: 'after',
                        message: 'End date must be after start date'
                    }
                }) && isValid;
            } else {
                isValid = validateInput(validUntilInput, {
                    type: 'date',
                    name: 'Valid until date',
                    startDate: true
                }) && isValid;
            }

            // Validate usage limits
            const maxUsagePerUserInput = form.querySelector(`#${prefix}MaxUsagePerUser`);
            const totalUsageLimitInput = form.querySelector(`#${prefix}TotalUsageLimit`);
            
            isValid = validateInput(maxUsagePerUserInput, {
                type: 'number',
                name: 'Max usage per user',
                min: 1
            }) && isValid;
            
            isValid = validateInput(totalUsageLimitInput, {
                type: 'number',
                name: 'Total usage limit',
                min: 1
            }) && isValid;

            // Compare usage limits if both are valid
            if (isValid) {
                const maxPerUser = Number(maxUsagePerUserInput.value);
                const totalLimit = Number(totalUsageLimitInput.value);
                
                if (totalLimit < maxPerUser) {
                    showError(totalUsageLimitInput, 'Total usage limit cannot be less than max usage per user');
                    isValid = false;
                }
            }

            return isValid;
        }

        // Add this function to handle form validation and submission
        async function handleFormSubmission(form, isEdit = false) {
            // Clear all previous errors
            form.querySelectorAll('.error-message').forEach(el => el.remove());
            form.querySelectorAll('.border-red-500').forEach(el => el.classList.remove('border-red-500'));

            try {
                const formData = new FormData(form);
                const formObject = Object.fromEntries(formData.entries());

                // Client-side validation
                const errors = validateForm(formObject, isEdit);
                if (Object.keys(errors).length > 0) {
                    displayErrors(form, errors);
                    return false;
                }

                const url = isEdit ? `/admin/coupons/${formObject.couponId}` : '/admin/add-coupon';
                const method = isEdit ? 'PUT' : 'POST';

                if (isEdit) {
                    delete formObject.couponId;
                }

                const response = await fetch(url, {
                    method,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formObject)
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            await Swal.fire({
                icon: 'success',
                        title: 'Success',
                        text: isEdit ? 'Coupon updated successfully' : 'Coupon created successfully',
                showConfirmButton: false,
                timer: 1500
            });
                    if (isEdit) {
                        closeEditCouponModal();
                    } else {
            closeCreateCouponModal();
                    }
            location.reload();
        } else {
                    if (data.errors) {
                        displayErrors(form, data.errors);
                    } else {
                        throw new Error(data.message);
                    }
        }
    } catch (error) {
        console.error('Error:', error);
        await Swal.fire({
            icon: 'error',
                    title: 'Error',
                    text: error.message || 'An unexpected error occurred'
                });
            }
        }

        function validateForm(data, isEdit) {
            const errors = {};

            // Code validation
            if (!data.code || data.code.trim().length < 3) {
                errors.code = 'Coupon code must be at least 3 characters long';
            }

            // Description validation
            if (!data.description || data.description.trim().length < 10) {
                errors.description = 'Description must be at least 10 characters long';
            }

            // Discount validation
            const discountAmount = Number(data.discountAmount);
            if (data.discountType === 'percentage') {
                if (discountAmount <= 0 || discountAmount > 90) {
                    errors.discountAmount = 'Percentage discount must be between 1 and 90';
                }
            } else if (discountAmount <= 0) {
                errors.discountAmount = 'Fixed discount amount must be greater than 0';
            }

            // Minimum purchase validation
            if (Number(data.minPurchase) < 0) {
                errors.minPurchase = 'Minimum purchase amount cannot be negative';
            }

            // Date validation
            const currentDate = new Date();
            currentDate.setHours(0, 0, 0, 0);
            
            const validFrom = new Date(data.validFrom);
            const validUntil = new Date(data.validUntil);

            if (validFrom < currentDate) {
                errors.validFrom = 'Start date cannot be in the past';
            }

            if (validUntil <= validFrom) {
                errors.validUntil = 'End date must be after start date';
            }

            // Usage limits validation
            const maxUsagePerUser = Number(data.maxUsagePerUser);
            const totalUsageLimit = Number(data.totalUsageLimit);

            if (maxUsagePerUser < 1) {
                errors.maxUsagePerUser = 'Maximum usage per user must be at least 1';
            }

            if (totalUsageLimit < 1) {
                errors.totalUsageLimit = 'Total usage limit must be at least 1';
            } else if (totalUsageLimit < maxUsagePerUser) {
                errors.totalUsageLimit = 'Total usage limit cannot be less than max usage per user';
            }

            return errors;
        }

        function displayErrors(form, errors) {
            Object.keys(errors).forEach(field => {
                const input = form.querySelector(`[name="${field}"]`);
                if (input) {
                    input.classList.add('border-red-500');
                    
                    // Create error message element
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'error-message text-red-500 text-sm mt-1';
                    errorDiv.textContent = errors[field];
                    
                    // Insert error message after input
                    input.parentNode.insertBefore(errorDiv, input.nextSibling);
                }
            });
        }

        // Update form submission event listeners
        document.getElementById('createCouponForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            await handleFormSubmission(e.target, false);
        });

        document.getElementById('editCouponForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            await handleFormSubmission(e.target, true);
        });

        // Add real-time validation
        function addRealTimeValidation(form) {
            const inputs = form.querySelectorAll('input, select, textarea');
            
            inputs.forEach(input => {
                input.addEventListener('blur', () => {
                    const formData = new FormData(form);
                    const errors = validateForm(Object.fromEntries(formData.entries()), form.id === 'editCouponForm');
                    
                    // Clear all errors first
                    form.querySelectorAll('.error-message').forEach(el => el.remove());
                    form.querySelectorAll('.border-red-500').forEach(el => el.classList.remove('border-red-500'));
                    
                    // Display new errors if any
                    if (Object.keys(errors).length > 0) {
                        displayErrors(form, errors);
                    }
                });
            });
        }

        // Initialize real-time validation
        document.addEventListener('DOMContentLoaded', () => {
            addRealTimeValidation(document.getElementById('createCouponForm'));
            addRealTimeValidation(document.getElementById('editCouponForm'));

            // Add discount type change handlers
            ['', 'edit'].forEach(prefix => {
                const typeSelect = document.getElementById(`${prefix}DiscountType`);
                const amountInput = document.getElementById(`${prefix}DiscountAmount`);
                
                if (typeSelect && amountInput) {
                    typeSelect.addEventListener('change', () => {
                        if (typeSelect.value === 'percentage') {
                            amountInput.max = '90';
                            if (Number(amountInput.value) > 90) {
                                amountInput.value = '90';
                            }
                        } else {
                            amountInput.removeAttribute('max');
                        }
                    });
                }
            });
        });

        // Delete coupon function
    async function deleteCoupon(couponId) {
    const result = await Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch(`/admin/coupons-delete/${couponId}`, {
                method: 'DELETE'
            });

            const data = await response.json();

            if (data.status === 'success') {
                Swal.fire({
                    icon: 'success',
                    title: data.title,
                    text: data.message,
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: data.title,
                    text: data.message
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An unexpected error occurred'
            });
        }
    }
}

        // Error handling on page load
window.addEventListener('load', () => {
    const urlParams = new URLSearchParams(window.location.search);
    const error = urlParams.get('error');
    
    if (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: decodeURIComponent(error)
        });
    }
});
    </script>

<%- include("../../views/partials/admin/footer") %>