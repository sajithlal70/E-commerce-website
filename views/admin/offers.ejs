<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Offer Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<%- include("../../views/partials/admin/header") %>

<body class="bg-gray-50">
    <div class="container mx-auto px-4 py-8">
        <!-- Breadcrumb -->
        <div class="mb-8">
            <nav class="text-gray-500 text-sm">
                <a href="/admin/dashboard" class="hover:text-blue-600">Dashboard</a>
                <span class="mx-2">/</span>
                <span class="text-gray-700">Offers Management</span>
            </nav>
        </div>
    
        <!-- Main Content -->
        <div class="bg-white rounded-lg shadow-sm">
            <!-- Tabs -->
            <div class="border-b">
                <nav class="flex">
                    <a 
                        href="/admin/offers?tab=product"
                        class="px-6 py-4 <%= currentTab === 'product' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500' %> font-medium"
                    >
                        Product Offers
                    </a>
                    <a 
                        href="/admin/offers?tab=category"
                        class="px-6 py-4 <%= currentTab === 'category' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500' %> font-medium"
                    >
                        Category Offers
                    </a>
                </nav>
            </div>
    
            <!-- Product Offers Content -->
            <div id="product-offers" class="<%= currentTab === 'product' ? 'block' : 'hidden' %>">
                <div class="p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h1 class="text-2xl font-medium text-gray-800">Product Offers</h1>
                        <button 
                            onclick="document.getElementById('add-product-offer-modal').classList.remove('hidden')"
                            class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
                        >
                            <span class="text-xl mr-1">+</span> Create Offer
                        </button>
                    </div>
    
                    <table class="w-full">
                        <thead>
                            <tr class="text-left border-b">
                                <th class="py-3 px-4 font-medium">Product</th>
                                <th class="py-3 px-4 font-medium">Discount</th>
                                <th class="py-3 px-4 font-medium">Valid From</th>
                                <th class="py-3 px-4 font-medium">Valid Until</th>
                                <th class="py-3 px-4 font-medium">Status</th>
                                <th class="py-3 px-4 font-medium">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% productOffers.forEach(offer => { %>
                                <tr class="border-b hover:bg-gray-50">
                                    <td class="py-3 px-4"><%= offer.reference.productName %></td>
                                    <td class="py-3 px-4"><%= offer.discount %>%</td>
                                    <td class="py-3 px-4"><%= new Date(offer.validFrom).toLocaleDateString() %></td>
                                    <td class="py-3 px-4"><%= new Date(offer.validUntil).toLocaleDateString() %></td>
                                    <td class="py-3 px-4">
                                        <span class="px-2 py-1 rounded-full text-sm 
                                            <%= offer.status === 'active' ? 'bg-green-100 text-green-800' : 
                                                offer.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
                                                'bg-red-100 text-red-800' %>">
                                            <%= offer.status.charAt(0).toUpperCase() + offer.status.slice(1) %>
                                        </span>
                                    </td>
                                    <td class="py-3 px-4">
                                        <div class="inline-block">
                                            <a href="#" 
                                               onclick="showEditModal('product', '<%= offer._id %>', '<%= offer.reference._id %>', '<%= offer.discount %>', '<%= offer.validFrom %>', '<%= offer.validUntil %>')"
                                               class="text-blue-600 hover:text-blue-800 mr-4">
                                                Edit
                                            </a>
                                            <button type="button" 
                                                    onclick="deleteOffer('<%= offer._id %>')" 
                                                    class="text-red-600 hover:text-red-800">
                                                Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            </div>
    
            <!-- Category Offers Content -->
            <div id="category-offers" class="<%= currentTab === 'category' ? 'block' : 'hidden' %>">
                <div class="p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h1 class="text-2xl font-medium text-gray-800">Category Offers</h1>
                        <button 
                            onclick="document.getElementById('add-category-offer-modal').classList.remove('hidden')"
                            class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
                        >
                            <span class="text-xl mr-1">+</span> Create Offer
                        </button>
                    </div>
            
                    <table class="w-full">
                        <thead>
                            <tr class="text-left border-b">
                                <th class="py-3 px-4 font-medium">Category</th>
                                <th class="py-3 px-4 font-medium">Discount</th>
                                <th class="py-3 px-4 font-medium">Valid From</th>
                                <th class="py-3 px-4 font-medium">Valid Until</th>
                                <th class="py-3 px-4 font-medium">Status</th>
                                <th class="py-3 px-4 font-medium">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% categoryOffers.forEach(offer => { %>
                                <tr class="border-b hover:bg-gray-50">
                                    <td class="py-3 px-4"><%= offer.reference.name %></td>
                                    <td class="py-3 px-4"><%= offer.discount %>%</td>
                                    <td class="py-3 px-4"><%= new Date(offer.validFrom).toLocaleDateString() %></td>
                                    <td class="py-3 px-4"><%= new Date(offer.validUntil).toLocaleDateString() %></td>
                                    <td class="py-3 px-4">
                                        <span class="px-2 py-1 rounded-full text-sm 
                                            <%= offer.status === 'active' ? 'bg-green-100 text-green-800' : 
                                                offer.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
                                                'bg-red-100 text-red-800' %>">
                                            <%= offer.status.charAt(0).toUpperCase() + offer.status.slice(1) %>
                                        </span>
                                    </td>
                                    <td class="py-3 px-4">
                                        <div class="inline-block">
                                            <a href="#" 
                                               onclick="showEditModal('category', '<%= offer._id %>', '<%= offer.reference._id %>', '<%= offer.discount %>', '<%= offer.validFrom %>', '<%= offer.validUntil %>')"
                                               class="text-blue-600 hover:text-blue-800 mr-4">
                                                Edit
                                            </a>
                                            <button type="button" 
                                                    onclick="deleteOffer('<%= offer._id %>')" 
                                                    class="text-red-600 hover:text-red-800">
                                                Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Add Product Offer Modal -->
    <div id="add-product-offer-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md p-6">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold">Create Product Offer</h2>
                <button onclick="this.closest('.fixed').classList.add('hidden')" class="text-gray-500 hover:text-gray-700">✕</button>
            </div>
    
            <form action="/admin/offers" method="POST" class="offer-form" onsubmit="return validateOfferForm(this)">
                <input type="hidden" name="type" value="product">
                
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Product</label>
                    <select name="referenceId" required class="w-full border rounded-lg px-3 py-2">
                        <option value="">Select Product</option>
                        <% products.forEach(product => { %>
                            <option value="<%= product._id %>" data-price="<%= product.reqularPrice %>"><%= product.productName %></option>
                        <% }) %>
                    </select>
                    <div class="text-red-500 text-sm mt-1 error-message"></div>
                </div>
    
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Discount Percentage</label>
                    <input type="number" name="discount" required min="0" max="90" step="0.01"
                           class="w-full border rounded-lg px-3 py-2"
                           onchange="validateDiscountPercentage(this)">
                    <div class="text-red-500 text-sm mt-1 error-message"></div>
                </div>
    
                <div class="grid grid-cols-2 gap-4 mb-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Valid From</label>
                        <input type="date" name="validFrom" required class="w-full border rounded-lg px-3 py-2"
                               onchange="validateDates(this.closest('form'))">
                        <div class="text-red-500 text-sm mt-1 error-message"></div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Valid Until</label>
                        <input type="date" name="validUntil" required class="w-full border rounded-lg px-3 py-2"
                               onchange="validateDates(this.closest('form'))">
                        <div class="text-red-500 text-sm mt-1 error-message"></div>
                    </div>
                </div>
    
                <div class="flex justify-end space-x-2">
                    <button type="button" 
                            onclick="this.closest('.fixed').classList.add('hidden')"
                            class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300">
                        Cancel
                    </button>
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                        Create Offer
                    </button>
                </div>
            </form>
        </div>
    </div>

    <div id="add-category-offer-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md p-6">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold">Create Category Offer</h2>
                <button onclick="this.closest('.fixed').classList.add('hidden')" class="text-gray-500 hover:text-gray-700">✕</button>
            </div>
    
            <form action="/admin/offers" method="POST" class="offer-form" onsubmit="return validateOfferForm(this)">
                <input type="hidden" name="type" value="category">
                
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Category</label>
                    <select name="referenceId" required class="w-full border rounded-lg px-3 py-2">
                        <option value="">Select Category</option>
                        <% categories.forEach(category => { %>
                            <option value="<%= category._id %>"><%= category.name %></option>
                        <% }) %>
                    </select>
                    <div class="text-red-500 text-sm mt-1 error-message"></div>
                </div>
    
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Discount Percentage</label>
                    <input type="number" name="discount" required min="0" max="90" step="0.01"
                           class="w-full border rounded-lg px-3 py-2"
                           onchange="validateDiscountPercentage(this)">
                    <div class="text-red-500 text-sm mt-1 error-message"></div>
                </div>
    
                <div class="grid grid-cols-2 gap-4 mb-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Valid From</label>
                        <input type="date" name="validFrom" required class="w-full border rounded-lg px-3 py-2"
                               onchange="validateDates(this.closest('form'))">
                        <div class="text-red-500 text-sm mt-1 error-message"></div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Valid Until</label>
                        <input type="date" name="validUntil" required class="w-full border rounded-lg px-3 py-2"
                               onchange="validateDates(this.closest('form'))">
                        <div class="text-red-500 text-sm mt-1 error-message"></div>
                    </div>
                </div>
    
                <div class="flex justify-end space-x-2">
                    <button type="button" 
                            onclick="this.closest('.fixed').classList.add('hidden')"
                            class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300">
                        Cancel
                    </button>
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                        Create Offer
                    </button>
                </div>
            </form>
        </div>
    </div>

        <!-- Edit Offer Modal -->
        <div id="edit-offer-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
            <div class="bg-white rounded-lg shadow-xl w-full max-w-md p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-semibold">Edit Offer</h2>
                    <button onclick="toggleModal('edit-offer-modal')" class="text-gray-500 hover:text-gray-700">✕</button>
                </div>
        
                <form id="editOfferForm" class="offer-form" onsubmit="return handleEditFormSubmit(event)">
                    <input type="hidden" name="_method" value="PUT">
                    <input type="hidden" name="type" id="editOfferType">
                    <input type="hidden" name="referenceId" id="editReferenceId">
                    <input type="hidden" name="offerId" id="editOfferId">
                    
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Discount Percentage</label>
                        <input type="number" name="discount" required min="0" max="90" step="0.01"
                               class="w-full border rounded-lg px-3 py-2"
                               onchange="validateDiscountPercentage(this)">
                        <div class="text-red-500 text-sm mt-1 error-message"></div>
                    </div>
                
                    <div class="grid grid-cols-2 gap-4 mb-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Valid From</label>
                            <input type="date" name="validFrom" required 
                                   class="w-full border rounded-lg px-3 py-2"
                                   onchange="validateDates(this.closest('form'))">
                            <div class="text-red-500 text-sm mt-1 error-message"></div>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Valid Until</label>
                            <input type="date" name="validUntil" required 
                                   class="w-full border rounded-lg px-3 py-2"
                                   onchange="validateDates(this.closest('form'))">
                            <div class="text-red-500 text-sm mt-1 error-message"></div>
                        </div>
                    </div>
                
                    <div class="flex justify-end space-x-2">
                        <button type="button" onclick="toggleModal('edit-offer-modal')"
                                class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300">
                            Cancel
                        </button>
                        <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                            Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>


    <script>
        // Add products array to JavaScript context
        const products = <%- JSON.stringify(products) %>;

        // Delete offer function
        async function deleteOffer(offerId) {
            try {
                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                });

                if (result.isConfirmed) {
                    const response = await fetch(`/admin/delete-offer/${offerId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();

                    if (data.success) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Deleted!',
                            text: data.message
                        });
                        window.location.reload();
                    } else {
                        throw new Error(data.message || 'Failed to delete offer');
                    }
                }
            } catch (error) {
                console.error('Delete error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: error.message || 'Failed to delete offer'
                });
            }
        }

        // Safe function to toggle modal
        function toggleModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.toggle('hidden');
            }
        }

        // Safe function to close modal
        function closeModal(element) {
            const modal = element.closest('.fixed');
            if (modal) {
                modal.classList.add('hidden');
            }
        }

        // Document ready handler
        document.addEventListener('DOMContentLoaded', function() {
            // Tab functionality
            const productContent = document.getElementById('product-offers');
            const categoryContent = document.getElementById('category-offers');
            
            if (productContent && categoryContent) {
                const currentTab = new URLSearchParams(window.location.search).get('tab') || 'product';
                
                if (currentTab === 'product') {
                    productContent.classList.remove('hidden');
                    categoryContent.classList.add('hidden');
                } else {
                    categoryContent.classList.remove('hidden');
                    productContent.classList.add('hidden');
                }
            }

            // Add form submission handlers
            document.querySelectorAll('form').forEach(form => {
                form.addEventListener('submit', async function(e) {
                    e.preventDefault();

                    // Validate dates
                    const validFrom = new Date(this.querySelector('input[name="validFrom"]').value);
                    const validUntil = new Date(this.querySelector('input[name="validUntil"]').value);
                    
                    if (validUntil <= validFrom) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Invalid Dates',
                            text: 'Valid Until date must be after Valid From date'
                        });
                        return false;
                    }
                    
                    // Validate discount
                    const discount = parseFloat(this.querySelector('input[name="discount"]').value);
                    if (discount < 0 || discount > 100) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Invalid Discount',
                            text: 'Discount must be between 0 and 100'
                        });
                        return false;
                    }

                    try {
                        const formData = new FormData(this);
                        const data = Object.fromEntries(formData.entries());

                        const response = await fetch(this.action, {
                            method: this.method,
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json'
                            },
                            body: JSON.stringify(data)
                        });

                        let result;
                        const contentType = response.headers.get('content-type');
                        if (contentType && contentType.includes('application/json')) {
                            result = await response.json();
                        } else {
                            throw new Error('Server returned non-JSON response');
                        }

                        if (!response.ok) {
                            throw new Error(result.message || `HTTP error! status: ${response.status}`);
                        }

                        if (result.success) {
                            await Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: result.message || 'Operation completed successfully',
                                timer: 2000,
                                showConfirmButton: false
                            });

                            // Close modal
                            const modal = this.closest('.fixed');
                            if (modal) {
                                modal.classList.add('hidden');
                            }
                            
                            // Refresh the page
                            window.location.reload();
                        } else {
                            throw new Error(result.message || 'Operation failed');
                        }
                    } catch (error) {
                        console.error('Form submission error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: error.message || 'Something went wrong!'
                        });
                    }
                });
            });
        });

        // Add these validation functions after your existing script
        function showError(element, message) {
            const errorDiv = element.nextElementSibling;
            if (errorDiv && errorDiv.classList.contains('error-message')) {
                errorDiv.textContent = message;
            }
            element.classList.add('border-red-500');
            return false;
        }

        function clearError(element) {
            const errorDiv = element.nextElementSibling;
            if (errorDiv && errorDiv.classList.contains('error-message')) {
                errorDiv.textContent = '';
            }
            element.classList.remove('border-red-500');
            return true;
        }

        function validateDiscountPercentage(input) {
            const value = parseFloat(input.value);
            if (isNaN(value) || value < 0) {
                return showError(input, 'Discount must be a positive number');
            }
            if (value > 90) {
                return showError(input, 'Discount cannot exceed 90%');
            }
            return clearError(input);
        }

        function validateDates(form) {
            const validFrom = form.querySelector('[name="validFrom"]');
            const validUntil = form.querySelector('[name="validUntil"]');
            
            if (!validFrom.value || !validUntil.value) return true;
            
            const fromDate = new Date(validFrom.value);
            const untilDate = new Date(validUntil.value);
            const today = new Date();
            today.setHours(0, 0, 0, 0);

            if (fromDate < today) {
                return showError(validFrom, 'Valid From date cannot be in the past');
            }
            if (untilDate < fromDate) {
                return showError(validUntil, 'Valid Until date must be current or after Valid From date');
            }
            
            clearError(validFrom);
            clearError(validUntil);
            return true;
        }

        async function validateOfferForm(form) {
            const type = form.querySelector('[name="type"]').value;
            const referenceId = form.querySelector('[name="referenceId"]').value;
            const discount = form.querySelector('[name="discount"]').value;
            
            if (!validateDiscountPercentage(form.querySelector('[name="discount"]'))) {
                return false;
            }
            
            if (!validateDates(form)) {
                return false;
            }

            try {
                // Check for existing offers
                const response = await fetch(`/admin/check-existing-offer?type=${type}&referenceId=${referenceId}`);
                const data = await response.json();
                
                if (data.exists) {
                    const select = form.querySelector('[name="referenceId"]');
                    showError(select, `This ${type} already has an active offer`);
                    return false;
                }

                // For product offers, validate final price
                if (type === 'product') {
                    const select = form.querySelector('[name="referenceId"]');
                    const option = select.selectedOptions[0];
                    const regularPrice = parseFloat(option.dataset.price);
                    const discountAmount = (regularPrice * parseFloat(discount)) / 100;
                    const finalPrice = regularPrice - discountAmount;

                    if (finalPrice <= 0) {
                        showError(form.querySelector('[name="discount"]'), 
                            'This discount would result in a zero or negative price');
                        return false;
                    }
                }

                return true;
            } catch (error) {
                console.error('Validation error:', error);
                return false;
            }
        }

        // Add this function to handle edit modal display
        function showEditModal(type, offerId, referenceId, discount, validFrom, validUntil) {
            const modal = document.getElementById('edit-offer-modal');
            const form = document.getElementById('editOfferForm');
            
            // Clear any previous error messages
            form.querySelectorAll('.error-message').forEach(div => div.textContent = '');
            form.querySelectorAll('input').forEach(input => input.classList.remove('border-red-500'));
            
            // Set hidden fields
            form.querySelector('#editOfferType').value = type;
            form.querySelector('#editReferenceId').value = referenceId;
            form.querySelector('#editOfferId').value = offerId;
            
            // Set visible fields
            const discountInput = form.querySelector('[name="discount"]');
            discountInput.value = discount;
            validateDiscountPercentage(discountInput);

            const validFromInput = form.querySelector('[name="validFrom"]');
            validFromInput.value = new Date(validFrom).toISOString().split('T')[0];

            const validUntilInput = form.querySelector('[name="validUntil"]');
            validUntilInput.value = new Date(validUntil).toISOString().split('T')[0];
            
            // Validate dates after setting values
            validateDates(form);
            
            // Show modal
            modal.classList.remove('hidden');
        }

        // Update the handleEditFormSubmit function
        async function handleEditFormSubmit(event) {
            event.preventDefault();
            const form = event.target;
            
            // Clear previous error messages
            form.querySelectorAll('.error-message').forEach(div => div.textContent = '');
            form.querySelectorAll('input').forEach(input => input.classList.remove('border-red-500'));
            
            // Validate discount percentage
            const discountInput = form.querySelector('[name="discount"]');
            if (!validateDiscountPercentage(discountInput)) {
                return false;
            }
            
            // Validate dates
            if (!validateDates(form)) {
                return false;
            }

            try {
                const offerId = form.querySelector('#editOfferId').value;
                const type = form.querySelector('#editOfferType').value;
                const referenceId = form.querySelector('#editReferenceId').value;
                const formData = new FormData(form);
                const data = Object.fromEntries(formData.entries());

                // Check for existing offers (excluding current offer)
                const response = await fetch(`/admin/check-existing-offer?type=${type}&referenceId=${referenceId}&excludeOfferId=${offerId}`);
                const existingOfferData = await response.json();
                
                if (existingOfferData.exists) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        text: `This ${type} already has another active offer`
                    });
                    return false;
                }

                // For product offers, validate final price
                if (type === 'product') {
                    const product = products.find(p => p._id === referenceId);
                    if (product) {
                        const regularPrice = parseFloat(product.reqularPrice);
                        const discountAmount = (regularPrice * parseFloat(data.discount)) / 100;
                        const finalPrice = regularPrice - discountAmount;

                        if (finalPrice <= 0) {
                            showError(discountInput, 'This discount would result in a zero or negative price');
                            Swal.fire({
                                icon: 'error',
                                title: 'Validation Error',
                                text: 'This discount would result in a zero or negative price'
                            });
                            return false;
                        }
                    }
                }
                
                const updateResponse = await fetch(`/admin/edit-offer/${offerId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                const result = await updateResponse.json();

                if (!updateResponse.ok) {
                    throw new Error(result.message || `HTTP error! status: ${updateResponse.status}`);
                }

                await Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: result.message || 'Offer updated successfully',
                    timer: 2000,
                    showConfirmButton: false
                });

                // Close modal and refresh page
                toggleModal('edit-offer-modal');
                window.location.reload();
                
            } catch (error) {
                console.error('Edit form submission error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: error.message || 'Failed to update offer'
                });
            }
            
            return false;
        }
    </script>

<%- include("../../views/partials/admin/footer") %>