<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<%- include("../../views/partials/admin/header") %>
<body class="bg-gray-100 p-6">
    <div class="container mx-auto">
        <!-- Inventory Stats -->
        <div class="grid grid-cols-4 gap-4 mb-6">
            <div class="bg-blue-500 text-white p-4 rounded">
                <h3 class="text-lg font-bold">Total Products</h3>
                <p class="text-2xl"><%= stats.totalProducts %></p>
            </div>
            <div class="bg-green-500 text-white p-4 rounded">
                <h3 class="text-lg font-bold">Available</h3>
                <p class="text-2xl"><%= stats.availableProducts %></p>
            </div>
            <div class="bg-yellow-500 text-white p-4 rounded">
                <h3 class="text-lg font-bold">Out of Stock</h3>
                <p class="text-2xl"><%= stats.outOfStockProducts %></p>
            </div>
            <div class="bg-red-500 text-white p-4 rounded">
                <h3 class="text-lg font-bold">Discontinued</h3>
                <p class="text-2xl"><%= stats.discontinuedProducts %></p>
            </div>
        </div>

        <!-- Product Management Section -->
        <div class="bg-white shadow-md rounded">
            <!-- Search and Filters -->
            <div class="p-4 border-b flex justify-between items-center">
                <input type="text" id="searchInput" placeholder="Search products..." 
                    class="w-1/3 p-2 border rounded">
                
                <select id="categoryFilter" class="p-2 border rounded">
                    <option value="">All Categories</option>
                    <% categories.forEach(function(category) { %>
                        <option value="<%= category._id %>"><%= category.name %></option>
                    <% }); %>
                </select>

                <select id="statusFilter" class="p-2 border rounded">
                    <option value="">All Statuses</option>
                    <option value="Available">Available</option>
                    <option value="out of stock">Out of Stock</option>
                    <option value="Discontinued">Discontinued</option>
                </select>
            </div>

            <!-- Product Table -->
            <table class="w-full">
                <thead class="bg-gray-100">
                    <tr>
                        <th class="p-3 text-left">No</th>
                        <th class="p-3 text-left">Product Name</th>
                        <th class="p-3 text-left">Image</th>
                        <th class="p-3 text-left">Category</th>
                        <th class="p-3 text-left">Price</th>
                        <th class="p-3 text-left">Stock</th>
                        <th class="p-3 text-left">Status</th>
                        <th class="p-3 text-left">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% products.forEach(function(product, index) { %>
                    <tr class="border-b hover:bg-gray-50">
                        <td class="p-3"><%= ((pagination.currentPage - 1) * pagination.limit) + index + 1 %></td>
                        <td class="p-3"><%= product.productName %></td>
                        <td class="p-3">
                            <% if(product.productImage && product.productImage.length>0) { %>
                                <img src="/uploads/products/<%= product.productImage[0] %>" 
                                     alt="<%= product.productName %>" 
                                     class="w-12 h-12 rounded-full object-cover">
                            <% } else { %>
                                <img src="/images/placeholder.jpg" 
                                     alt="No image" 
                                     class="w-12 h-12 rounded-full object-cover">
                            <% } %>
                        </td>
                        <td class="p-3"><%= product.category.name %></td>
                        <td class="p-3">â‚¹<%= product.salePrice %></td>
                        <td class="p-3">
                            <div class="flex items-center space-x-2">
                                <input type="number" 
                                       id="stock-<%= product._id %>" 
                                       value="<%= product.quantity %>" 
                                       min="0"
                                       class="w-20 p-1 border rounded text-center"
                                       onchange="handleStockChange('<%= product._id %>', this.value)">
                                <button onclick="updateStock('<%= product._id %>')"
                                        class="bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600 text-sm">
                                    Update
                                </button>
                            </div>
                        </td>
                        <td class="p-3">
                            <span class="px-2 py-1 rounded text-sm
                                <%= product.status === 'Available' ? 'bg-green-100 text-green-800' : 
                                    product.status === 'out of stock' ? 'bg-red-100 text-red-800' : 
                                    'bg-gray-100 text-gray-800' %>">
                                <%= product.status %>
                            </span>
                        </td>
                        <td class="p-3">
                            <% if (product.status === 'Discontinued') { %>
                                <button onclick="reactivateProduct('<%= product._id %>')"
                                        class="text-green-500 hover:text-green-700">
                                    Reactivate
                                </button>
                            <% } else { %>
                                <button onclick="softDeleteProduct('<%= product._id %>')"
                                        class="text-red-500 hover:text-red-700">
                                    Discontinue
                                </button>
                            <% } %>
                        </td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>

            <!-- Pagination -->
            <div class="mt-6 flex items-center justify-between bg-white p-4">
                <div class="flex items-center space-x-2">
                    <select id="pageSizeSelect" 
                            class="p-2 border rounded"
                            onchange="changePageSize(this.value)">
                        <option value="10" <%= pagination.limit === 10 ? 'selected' : '' %>>10 per page</option>
                        <option value="25" <%= pagination.limit === 25 ? 'selected' : '' %>>25 per page</option>
                        <option value="50" <%= pagination.limit === 50 ? 'selected' : '' %>>50 per page</option>
                    </select>
                    <span class="text-sm text-gray-700">
                        Showing <%= (pagination.currentPage - 1) * pagination.limit + 1 %> 
                        to <%= Math.min(pagination.currentPage * pagination.limit, stats.totalProducts) %> 
                        of <%= stats.totalProducts %> entries
                    </span>
                </div>
                
                <div class="flex space-x-2">
                    <% if (pagination.hasPrevPage) { %>
                        <a href="?page=<%= pagination.currentPage - 1 %>&limit=<%= pagination.limit %>" 
                           class="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300">
                            Previous
                        </a>
                    <% } %>
                    
                    <% for(let i = Math.max(1, pagination.currentPage - 2); 
                           i <= Math.min(pagination.totalPages, pagination.currentPage + 2); i++) { %>
                        <a href="?page=<%= i %>&limit=<%= pagination.limit %>" 
                           class="px-4 py-2 rounded <%= pagination.currentPage === i ? 
                                 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300' %>">
                            <%= i %>
                        </a>
                    <% } %>
                    
                    <% if (pagination.hasNextPage) { %>
                        <a href="?page=<%= pagination.currentPage + 1 %>&limit=<%= pagination.limit %>" 
                           class="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300">
                            Next
                        </a>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded shadow-lg hidden">
        Stock updated successfully
    </div>

    <script>
       let stockUpdateTimeout;

function handleStockChange(productId, value) {
    clearTimeout(stockUpdateTimeout);
    const input = document.getElementById(`stock-${productId}`);
    input.classList.add('border-yellow-500');
}

function updateStock(productId) {
    const quantity = document.getElementById(`stock-${productId}`).value;
    
    fetch(`/admin/inventory/update-stock/${productId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ quantity: parseInt(quantity) })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: data.message,
                toast: true,
                position: 'bottom-end',
                showConfirmButton: false,
                timer: 3000,
            });
            
            const input = document.getElementById(`stock-${productId}`);
            input.classList.remove('border-yellow-500');
            input.classList.add('border-green-500');
            setTimeout(() => {
                input.classList.remove('border-green-500');
            }, 2000);

            location.reload();
            
        } else {
            throw new Error(data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: error.message || 'Error updating stock',
            toast: true,
            position: 'bottom-end',
            showConfirmButton: false,
            timer: 3000
        });
    });

    
}

function reactivateProduct(productId) {
    Swal.fire({
        title: 'Reactivate Product?',
        text: "This product will be marked as available again.",
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, reactivate it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/inventory/reactivate/${productId}`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: data.message,
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    throw new Error(data.message);
                }
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: error.message || 'Error reactivating product'
                });
            });
        }
    });
}


function softDeleteProduct(productId) {
    Swal.fire({
        title: 'Are you sure?',
        text: "This product will be marked as discontinued.",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, discontinue it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/inventory/soft-delete/${productId}`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: data.message,
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    throw new Error(data.message);
                }
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: error.message || 'Error discontinuing product'
                });
            });
        }
    });
}

function filterProducts() {
    const search = document.getElementById('searchInput').value.toLowerCase();
    const category = document.getElementById('categoryFilter').value;
    const status = document.getElementById('statusFilter').value;

    const urlParams = new URLSearchParams(window.location.search);
    urlParams.set('search', search);
    urlParams.set('category', category);
    urlParams.set('status', status);
    urlParams.set('page', 1);
    
    window.location.search = urlParams.toString();
}

function changePageSize(limit) {
    const urlParams = new URLSearchParams(window.location.search);
    urlParams.set('limit', limit);
    urlParams.set('page', 1);
    window.location.search = urlParams.toString();
}

// Event listeners
document.getElementById('searchInput').addEventListener('input', 
    debounce(filterProducts, 500));
document.getElementById('categoryFilter').addEventListener('change', filterProducts);
document.getElementById('statusFilter').addEventListener('change', filterProducts);

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}
    </script>
    
</body>
</html>