<script src="https://cdn.tailwindcss.com"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<%- include('../../views/partials/user/header') %>
<!-- Breadcrumb Start -->
<div class="container-fluid">
    <div class="row px-xl-5">
        <div class="col-12">
            <nav class="breadcrumb bg-light mb-30">
                <a class="breadcrumb-item text-dark" href="/">Home</a>
                <a class="breadcrumb-item text-dark" href="/profile">Profile</a>
                <span class="breadcrumb-item active">Orders</span>
            </nav>
        </div>
    </div>
</div>

<div class="mx-auto px-4 py-8">
    <div class="flex flex-col md:flex-row gap-6">
        <!-- Sidebar -->
        <div class="w-full md:w-1/4">
            <%- include("../partials/user/profileSidebar", { currentPage: 'orders' }) %>
        </div>
        
        <!-- Main Content -->
        <div class="w-full md:w-3/4">
            <div class="flex justify-between items-center mb-6">
                <h1 class="text-2xl font-bold text-gray-800">Order Details</h1>
                <a href="/order/<%= order._id %>/invoice" 
                  class="bg-gradient-to-r from-green-400 to-green-500 text-white px-6 py-2 rounded-lg hover:from-green-500 hover:to-green-600 transition duration-300 ease-in-out shadow-md flex items-center">
                   <i class="fas fa-download mr-2"></i> Download Invoice
               </a>
            </div>

            <!-- Order Summary -->
            <div class="bg-white rounded-xl shadow-md p-6 mb-6 border border-yellow-200">
                <div class="flex flex-wrap justify-between mb-6">
                    <div>
                        <h2 class="text-lg font-semibold mb-2 text-gray-800">Order #<%= order._id %></h2>
                        <p class="text-gray-600">Order Date: <%= new Date(order.createdAt).toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'long', 
                            day: 'numeric' 
                        }) %></p>
                        <p class="text-gray-600">Status: 
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium
                                <%= order.orderStatus === 'Processing' ? 'bg-blue-100 text-blue-800' :
                                   order.orderStatus === 'Shipped' ? 'bg-yellow-100 text-yellow-800' :
                                   order.orderStatus === 'Delivered' ? 'bg-green-100 text-green-800' :
                                   order.orderStatus === 'Cancelled' ? 'bg-red-100 text-red-800' :
                                   'bg-gray-100 text-gray-800' %>">
                                <span class="w-2 h-2 rounded-full mr-2
                                    <%= order.orderStatus === 'Processing' ? 'bg-blue-400' :
                                       order.orderStatus === 'Shipped' ? 'bg-yellow-400' :
                                       order.orderStatus === 'Delivered' ? 'bg-green-400' :
                                       order.orderStatus === 'Cancelled' ? 'bg-red-400' :
                                       'bg-gray-400' %>"></span>
                                <%= order.orderStatus %>
                            </span>
                        </p>
                        <p class="text-gray-600 mt-2">
                            <i class="fas fa-credit-card mr-2 text-yellow-600"></i>
                            Payment Method: 
                            <span class="font-medium">
                                <%= order.paymentMethod === 'cod' ? 'Cash on Delivery' : 
                                    order.paymentMethod === 'razorpay' ? 'Online Payment (Razorpay)' : 
                                    order.paymentMethod %>
                            </span>
                        </p>
                    </div>
                </div>
            </div>

            <!-- Order Tracking -->
            <div class="bg-white rounded-xl shadow-md p-6 mb-6 border border-yellow-200">
                <h2 class="text-lg font-semibold mb-6 text-gray-800">Order Timeline</h2>
                
                <!-- Desktop Timeline (hidden on mobile) -->
                <div class="hidden md:block relative">
                    <div id="timeline-progress-bar" class="h-1 bg-gray-200 absolute top-1/2 left-0 right-0 -translate-y-1/2 rounded-full">
                        <div id="progress-fill" class="h-full bg-gradient-to-r from-yellow-400 to-amber-500 rounded-full" 
                             style="width: 0%; transition: width 1s ease-in-out;"></div>
                    </div>
                    
                    <div id="desktop-timeline" class="grid grid-cols-4 gap-4 relative">
                        <!-- Timeline steps will be dynamically inserted here -->
                        <div class="timeline-loading flex justify-center items-center py-10">
                            <div class="animate-spin rounded-full h-10 w-10 border-b-2 border-yellow-500"></div>
                        </div>
                    </div>
                </div>
                
                <!-- Mobile Timeline (vertical, visible only on mobile) -->
                <div class="md:hidden relative">
                    <div id="mobile-timeline" class="space-y-8 relative">
                        <div class="absolute left-3.5 top-0 h-full w-0.5 bg-gray-200"></div>
                        <!-- Mobile timeline steps will be dynamically inserted here -->
                        <div class="timeline-loading flex justify-center items-center py-10">
                            <div class="animate-spin rounded-full h-10 w-10 border-b-2 border-yellow-500"></div>
                        </div>
                    </div>
                </div>
            </div>
            

            <!-- Shipping Information -->
            <div class="bg-white rounded-xl shadow-md p-6 mb-6 border border-yellow-200">
                <h2 class="text-lg font-semibold mb-4 text-gray-800">Shipping Information</h2>
                <div class="space-y-2 bg-yellow-50 p-4 rounded-lg">
                    <div class="flex items-center text-gray-600">
                        <i class="fas fa-user mr-3 text-yellow-600"></i>
                        <p><%= order.shippingAddress.name %></p>
                    </div>
                    <div class="flex items-center text-gray-600">
                        <i class="fas fa-map-marker-alt mr-3 text-yellow-600"></i>
                        <div>
                            <p><%= order.shippingAddress.address %></p>
                            <p><%= order.shippingAddress.apartment %></p>
                            <p><%= order.shippingAddress.street %></p>
                            <p><%= order.shippingAddress.landMark %></p>
                            <p><%= order.shippingAddress.city %>, <%= order.shippingAddress.state %></p>
                            <p><%= order.shippingAddress.postalCode %></p>
                        </div>
                    </div>
                    <div class="flex items-center text-gray-600">
                        <i class="fas fa-phone mr-3 text-yellow-600"></i>
                        <p><%= order.shippingAddress.phone %></p>
                    </div>
                </div>
            </div>

            <!-- Products -->
            <div class="bg-white rounded-xl shadow-md p-6 border border-yellow-200">
                <h2 class="text-lg font-semibold mb-4 text-gray-800">Order Items</h2>
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead>
                            <tr class="border-b border-yellow-200">
                                <th class="text-left py-3 text-gray-600">Product</th>
                                <th class="text-left py-3 text-gray-600">Price</th>
                                <th class="text-left py-3 text-gray-600">Quantity</th>
                                <th class="text-left py-3 text-gray-600">Total</th>
                                <th class="text-left py-3 text-gray-600">Status</th>
                                <th class="text-left py-3 text-gray-600">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% order.items.forEach(item => { %>
                                <tr class="border-b border-yellow-200 hover:bg-yellow-50 transition duration-150">
                                    <td class="py-4">
                                        <div class="flex items-center">
                                            <img  src=" /uploads/products/<%= item.product.productImage ? item.product.productImage[0] : 'default.jpg' %>" 
                                            alt="<%= item.product.productName %>" 
                                            class="w-16 h-16 object-cover rounded">
                                            <div>
                                                <p class="font-semibold text-gray-800"><%= item.product.productName %></p>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="py-4 text-gray-600">₹<%= item.price.toFixed(2) %></td>
                                    <td class="py-4 text-gray-600"><%= item.quantity %></td>
                                    <td class="py-4 font-medium text-gray-800">₹<%= (item.price * item.quantity).toFixed(2) %></td>
                                    <td class="py-4">
                                        <% if (item.status !== 'Cancelled' && !['Delivered', 'Cancelled'].includes(order.orderStatus)) { %>
                                            <span class="text-gray-600 text-sm">
                                                <%= item.status === 'Processing' ? 'Processing' :
                                                   item.status === 'Shipped' ? 'Shipped' :
                                                   item.status === 'Delivered' ? 'Delivered' :
                                                   'Pending' %>
                                            </span>
                                        <% } else if (item.status === 'Cancelled') { %>
                                            <span class="text-red-500 text-sm">Cancelled</span>
                                        <% } %>
                                    </td>
                                    <td class="py-4">
                                        <% if (item.status !== 'Cancelled' && !['Delivered', 'Cancelled'].includes(order.orderStatus)) { %>
                                            <button 
                                                onclick="cancelItem('<%= order._id %>', '<%= item._id %>')"
                                                class="px-3 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600 transition">
                                                Cancel Item
                                            </button>
                                        <% } else if (item.status === 'Cancelled') { %>
                                            <span class="text-red-500 text-sm">Cancelled</span>
                                        <% } %>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>

                    <!-- Order Totals -->
                    <div class="mt-6 space-y-2">
                        <div class="flex justify-end">
                            <div class="w-full md:w-1/3 bg-yellow-50 p-4 rounded-lg">
                                <div class="flex justify-between py-2">
                                    <span class="text-gray-600">Subtotal:</span>
                                    <span class="font-medium text-gray-800">₹<%= order.subtotal.toFixed(2) %></span>
                                </div>
                                <div class="flex justify-between py-2">
                                    <span class="text-gray-600">Shipping:</span>
                                    <span class="font-medium text-gray-800">₹<%= order.shippingCost.toFixed(2) %></span>
                                </div>
                                <% if (order.coupon) { %>
                                    <div class="flex justify-between py-2 text-yellow-600">
                                        <span class="flex items-center">
                                            <i class="fas fa-tag mr-2"></i>
                                            Discount (<%= order.couponCode %>):
                                        </span>
                                        <span>-₹<%= order.discountAmount.toFixed(2) %></span>
                                    </div>
                                <% } %>
                                <div class="flex justify-between py-2 border-t border-yellow-200 mt-2">
                                    <span class="font-semibold text-gray-800">Total:</span>
                                    <span class="font-semibold text-yellow-600">₹<%= order.total.toFixed(2) %></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function cancelItem(orderId, itemId) {
        // Use a more user-friendly confirmation dialog
        Swal.fire({
            title: 'Cancel Item',
            text: 'Are you sure you want to cancel this item?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!'
        }).then((result) => {
            if (result.isConfirmed) {
                // Show a form for reason and comments
                Swal.fire({
                    title: 'Cancellation Reason',
                    html: `
                        <select id="cancelReason" class="swal2-input">
                            <option value="">Select a reason</option>
                            <option value="wrong_item">Wrong Item</option>
                            <option value="changed_mind">Changed Mind</option>
                            <option value="delivery_delay">Delivery Delay</option>
                            <option value="quality_issue">Quality Issue</option>
                            <option value="other">Other</option>
                        </select>
                        <textarea id="cancelComments" class="swal2-textarea" placeholder="Additional comments (optional)"></textarea>
                    `,
                    showCancelButton: true,
                    confirmButtonText: 'Submit',
                    preConfirm: () => {
                        const reason = document.getElementById('cancelReason').value;
                        const comments = document.getElementById('cancelComments').value;
                        
                        if (!reason) {
                            Swal.showValidationMessage('Please select a reason');
                            return false;
                        }
                        return { reason, comments };
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        processCancellation(orderId, itemId, result.value.reason, result.value.comments);
                    }
                });
            }
        });
    }

    function processCancellation(orderId, itemId, reason, comments) {
        // Show loading state
        Swal.fire({
            title: 'Processing...',
            text: 'Please wait while we process your cancellation request',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        fetch(`/orders/${orderId}/items/${itemId}/cancel`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ reason, comments })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Item Cancelled',
                    html: `
                        Item has been cancelled successfully.<br>
                        ${data.refundStatus === 'Completed' ? 
                            `A refund of ₹${data.refundAmount.toFixed(2)} has been initiated.` : 
                            data.refundStatus === 'Not Required' ? 
                            'No refund required for COD order.' :
                            'Refund will be processed soon.'}
                    `,
                    confirmButtonText: 'OK'
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Failed to cancel item'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to cancel item. Please try again.'
            });
        });
    }

    document.addEventListener('DOMContentLoaded', function() {
        // Fetch order status and timeline data
        fetch('/orders/<%= order._id %>/status')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    renderTimeline(data.timeline, data.orderStatus);
                } else {
                    showTimelineError(data.message || 'Failed to load timeline');
                }
            })
            .catch(error => {
                console.error('Error fetching timeline:', error);
                showTimelineError('Network error. Please refresh the page.');
            });
            
        function renderTimeline(timeline, currentStatus) {
            // Remove loading indicators
            document.querySelectorAll('.timeline-loading').forEach(el => el.remove());
            
            // Get timeline steps in order
            const baseSteps = ['ordered', 'processing', 'shipped', 'delivered'];
            const specialSteps = ['payment', 'cancelled', 'returnRequested', 'returned'];
            
            // Filter to only include steps that exist in the timeline data
            const activeSteps = baseSteps.filter(step => timeline[step]);
            
            // Calculate progress percentage for the progress bar
            let progressPercentage = 0;
            if (currentStatus === 'Delivered') {
                progressPercentage = 100;
            } else if (currentStatus === 'Shipped') {
                progressPercentage = 75;
            } else if (currentStatus === 'Processing') {
                progressPercentage = 50;
            } else if (currentStatus === 'Pending') {
                progressPercentage = 25;
            }
            
            // Special case for cancelled or returned orders
            if (currentStatus === 'Cancelled' || currentStatus === 'Returned' || currentStatus === 'Return Requested') {
                document.getElementById('progress-fill').classList.remove('from-yellow-400', 'to-amber-500');
                
                if (currentStatus === 'Cancelled') {
                    document.getElementById('progress-fill').classList.add('bg-red-500');
                    progressPercentage = 100;
                } else if (currentStatus === 'Return Requested') {
                    document.getElementById('progress-fill').classList.add('bg-blue-500');
                    progressPercentage = 85;
                } else if (currentStatus === 'Returned') {
                    document.getElementById('progress-fill').classList.add('bg-green-500');
                    progressPercentage = 100;
                }
            }
            
            // Animate progress bar
            setTimeout(() => {
                document.getElementById('progress-fill').style.width = `${progressPercentage}%`;
            }, 300);
            
            // Render desktop timeline
            const desktopTimeline = document.getElementById('desktop-timeline');
            desktopTimeline.innerHTML = '';
            
            baseSteps.forEach((step, index) => {
                const stepData = timeline[step];
                if (!stepData) return;
                
                const isActive = stepData.status === true;
                const isCurrentStep = currentStatus.toLowerCase() === step;
                
                const stepElement = document.createElement('div');
                stepElement.className = "flex flex-col items-center";
                stepElement.innerHTML = `
                    <div class="relative z-10 w-10 h-10 ${isActive ? 'bg-gradient-to-r from-yellow-400 to-amber-500' : 'bg-gray-200'} 
                             rounded-full flex items-center justify-center ${isActive ? 'text-white' : 'text-gray-400'} mb-2
                             ${isCurrentStep ? 'ring-4 ring-yellow-200 animate-pulse' : ''} shadow-md transition-all duration-500">
                        <i class="fas ${getStepIcon(step)} text-sm"></i>
                    </div>
                    <p class="text-sm font-medium ${isActive ? 'text-gray-800' : 'text-gray-500'}">${stepData.label || formatStepName(step)}</p>
                    ${stepData.date ? `<p class="text-xs text-gray-500">${formatDate(stepData.date)}</p>` : ''}
                    ${stepData.description ? `<p class="text-xs text-gray-500 text-center max-w-xs mt-1">${stepData.description}</p>` : ''}
                `;
                desktopTimeline.appendChild(stepElement);
            });
            
            // Render mobile timeline (vertical)
            const mobileTimeline = document.getElementById('mobile-timeline');
            mobileTimeline.innerHTML = '';
            
            // Combine base steps and any special steps that exist in timeline
            const allSteps = [...baseSteps, ...specialSteps.filter(step => timeline[step])];
            
            // Sort steps by date
            const sortedSteps = allSteps
                .filter(step => timeline[step])
                .sort((a, b) => {
                    const dateA = new Date(timeline[a].date);
                    const dateB = new Date(timeline[b].date);
                    return dateA - dateB;
                });
                
            sortedSteps.forEach(step => {
                const stepData = timeline[step];
                if (!stepData) return;
                
                const isActive = stepData.status === true;
                const isCurrentStep = currentStatus.toLowerCase() === step;
                
                const mobileStep = document.createElement('div');
                mobileStep.className = "flex items-start relative";
                mobileStep.innerHTML = `
                    <div class="flex items-center justify-center">
                        <div class="relative z-10 w-8 h-8 ${isActive ? 'bg-gradient-to-r from-yellow-400 to-amber-500' : 'bg-gray-200'} 
                                 rounded-full flex items-center justify-center ${isActive ? 'text-white' : 'text-gray-400'}
                                 ${isCurrentStep ? 'ring-4 ring-yellow-200 animate-pulse' : ''} shadow-md">
                            <i class="fas ${getStepIcon(step)} text-xs"></i>
                        </div>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium ${isActive ? 'text-gray-800' : 'text-gray-500'}">${stepData.label || formatStepName(step)}</p>
                        ${stepData.date ? `<p class="text-xs text-gray-500">${formatDate(stepData.date, true)}</p>` : ''}
                        ${stepData.description ? `<p class="text-xs text-gray-500 mt-1">${stepData.description}</p>` : ''}
                    </div>
                `;
                mobileTimeline.appendChild(mobileStep);
            });
        }
        
        function showTimelineError(message) {
            const errorTemplate = `
                <div class="flex flex-col items-center justify-center py-6">
                    <i class="fas fa-exclamation-triangle text-yellow-500 text-2xl mb-2"></i>
                    <p class="text-gray-600 text-center">${message}</p>
                    <button class="mt-4 px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition" 
                            onclick="location.reload()">
                        <i class="fas fa-sync-alt mr-2"></i> Refresh
                    </button>
                </div>
            `;
            
            document.getElementById('desktop-timeline').innerHTML = errorTemplate;
            document.getElementById('mobile-timeline').innerHTML = errorTemplate;
        }
        
        function getStepIcon(step) {
            switch(step) {
                case 'ordered': return 'fa-shopping-cart';
                case 'processing': return 'fa-cog';
                case 'shipped': return 'fa-truck';
                case 'delivered': return 'fa-box-open';
                case 'payment': return 'fa-credit-card';
                case 'cancelled': return 'fa-times-circle';
                case 'returnRequested': return 'fa-undo';
                case 'returned': return 'fa-box-check';
                default: return 'fa-circle';
            }
        }
        
        function formatStepName(step) {
            return step.charAt(0).toUpperCase() + step.slice(1).replace(/([A-Z])/g, ' $1');
        }
        
        function formatDate(dateString, includeTime = false) {
            const date = new Date(dateString);
            if (includeTime) {
                return date.toLocaleString('en-US', { 
                    day: 'numeric', 
                    month: 'short', 
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }
            return date.toLocaleDateString('en-US', { day: 'numeric', month: 'short', year: 'numeric' });
        }
    });
</script>

<%- include('../../views/partials/user/footer') %>