<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Wallet - Dent Kart</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.7.32/sweetalert2.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.7.32/sweetalert2.min.js"></script>
    <style>
        /* Ensure text remains readable on small screens */
        @media (max-width: 640px) {
            .text-xs-adjust {
                font-size: 0.7rem;
            }
        }
        
        /* Custom scrollbar for tables */
        .custom-scrollbar::-webkit-scrollbar {
            height: 4px;
        }
        
        .custom-scrollbar::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }
        
        /* Improve animations */
        .fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        /* Better touch targets for mobile */
        @media (max-width: 640px) {
            button, a {
                min-height: 44px;
            }
        }

        /* Pagination styles */
        .pagination-btn {
            @apply px-3 py-1 rounded border text-sm font-medium;
        }
        .pagination-btn-active {
            @apply bg-blue-500 text-white border-blue-500;
        }
        .pagination-btn-inactive {
            @apply bg-white text-gray-700 border-gray-300 hover:bg-gray-50;
        }
        .pagination-btn-disabled {
            @apply bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">
    <%- include('../../views/partials/user/header') %>
    
    <!-- Breadcrumb - Improved for small screens -->
    <div class="container-fluid px-2 sm:px-4 lg:px-6">
        <div class="row">
            <div class="col-12">
                <nav class="breadcrumb bg-light mb-3 md:mb-5 p-2 sm:p-3 rounded text-xs sm:text-sm overflow-x-auto whitespace-nowrap custom-scrollbar">
                    <a class="breadcrumb-item text-dark hover:text-blue-600 transition" href="/">Home</a>
                    <a class="breadcrumb-item text-dark hover:text-blue-600 transition" href="/profile">Profile</a>
                    <span class="breadcrumb-item active">Wallet</span>
                </nav>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <main class="w-full mx-auto px-3 sm:px-6 lg:px-8 fade-in">
        <div class="grid grid-cols-1 lg:grid-cols-12 gap-4 sm:gap-6">
            <!-- Profile Sidebar - Full width on mobile, sidebar on larger screens -->
            <div class="lg:col-span-3 lg:sticky lg:top-4 lg:self-start">
                <%- include("../partials/user/profileSidebar", { currentPage: 'wallet' }) %>
            </div>

            <!-- Wallet Content -->
            <div class="lg:col-span-9 space-y-4 sm:space-y-6">
                <!-- User Info Section -->
                <div class="bg-white rounded-lg shadow p-3 sm:p-6 mb-3 sm:mb-5 transition hover:shadow-md">
                    <div class="flex flex-col sm:flex-row justify-between sm:items-center">
                        <div class="mb-2 sm:mb-0">
                            <h1 class="text-lg sm:text-xl md:text-2xl font-bold text-gray-800">Welcome, <%= user.name %></h1>
                            <p class="text-gray-600 text-xs sm:text-sm md:text-base">Wallet ID: <%= wallet.walletId %></p>
                        </div>
                        <div class="text-gray-600">
                            <i class="fas fa-user-circle text-yellow-600 group-hover:text-yellow-800 text-2xl sm:text-3xl md:text-4xl"></i>
                        </div>
                    </div>
                </div>

                <!-- Wallet Content - Improved grid layout for better responsiveness -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 sm:gap-5">
                    <!-- Balance Card - Full width on mobile, 1/3 on larger screens -->
                    <div class="bg-white rounded-lg shadow p-4 sm:p-5 transition hover:shadow-md h-auto">
                        <h2 class="text-base sm:text-lg md:text-xl font-semibold mb-2 sm:mb-3">Wallet Balance</h2>
                        <div class="text-xl sm:text-2xl md:text-3xl font-bold text-gray-800">â‚¹ <span id="balance"><%= wallet.balance.toFixed(2) %></span></div>
                        
                        <!-- Responsive button layout - Stack on small devices -->
                        <div class="flex flex-col sm:flex-row gap-2 sm:space-x-3 mt-3 sm:mt-4">
                            <button onclick="handleAddMoney()" class="bg-green-500 text-white px-3 py-2 rounded-md hover:bg-green-600 transition duration-300 flex-1 text-sm flex items-center justify-center">
                                <i class="fas fa-plus-circle mr-2"></i>Add Money
                            </button>
                            <button onclick="handleWithdraw()" class="bg-blue-500 text-white px-3 py-2 rounded-md hover:bg-blue-600 transition duration-300 flex-1 text-sm flex items-center justify-center">
                                <i class="fas fa-money-bill-wave mr-2"></i>Withdraw
                            </button>
                        </div>
                    </div>

                    <!-- Transaction History - Full width on mobile, 2/3 on larger screens -->
                    <div class="md:col-span-2 bg-white rounded-lg shadow p-4 sm:p-5 transition hover:shadow-md">
                        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-3">
                            <h2 class="text-base sm:text-lg md:text-xl font-semibold mb-2 sm:mb-0">Transaction History</h2>
                            <!-- Entries per page selector -->
                            <div class="flex items-center space-x-2">
                                <label for="entriesPerPage" class="text-xs sm:text-sm text-gray-600">Show:</label>
                                <select id="entriesPerPage" onchange="changeLimit(this.value)" class="text-xs sm:text-sm p-1 border rounded">
                                    <option value="5" <%= pagination.limit == 5 ? 'selected' : '' %>>5</option>
                                    <option value="10" <%= pagination.limit == 10 ? 'selected' : '' %>>10</option>
                                    <option value="20" <%= pagination.limit == 20 ? 'selected' : '' %>>20</option>
                                </select>
                            </div>
                        </div>
                        
                        <!-- Desktop/Tablet View (Hidden on Mobile) -->
                        <div class="hidden sm:block overflow-x-auto custom-scrollbar">
                            <table class="min-w-full bg-white">
                                <thead>
                                    <tr class="bg-gray-100">
                                        <th class="px-2 sm:px-3 md:px-4 py-2 text-left text-xs sm:text-sm">Date</th>
                                        <th class="px-2 sm:px-3 md:px-4 py-2 text-left text-xs sm:text-sm">Description</th>
                                        <th class="px-2 sm:px-3 md:px-4 py-2 text-left text-xs sm:text-sm">Type</th>
                                        <th class="px-2 sm:px-3 md:px-4 py-2 text-right text-xs sm:text-sm">Amount</th>
                                        <th class="px-2 sm:px-3 md:px-4 py-2 text-right text-xs sm:text-sm">Balance</th>
                                        <th class="px-2 sm:px-3 md:px-4 py-2 text-center text-xs sm:text-sm">Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% if (transactions.length === 0) { %>
                                        <tr>
                                            <td colspan="6" class="px-2 sm:px-3 md:px-4 py-4 text-center text-gray-500">No transactions found</td>
                                        </tr>
                                    <% } else { %>
                                        <% transactions.forEach(transaction => { %>
                                            <tr class="border-b hover:bg-gray-50 transition duration-150">
                                                <td class="px-2 sm:px-3 md:px-4 py-2 sm:py-3 text-xs sm:text-sm">
                                                    <%= new Date(transaction.createdAt).toLocaleDateString() %><br class="sm:hidden">
                                                    <span class="text-xs-adjust text-gray-500"><%= new Date(transaction.createdAt).toLocaleTimeString() %></span>
                                                </td>
                                                <td class="px-2 sm:px-3 md:px-4 py-2 sm:py-3 text-xs sm:text-sm"><%= transaction.description %></td>
                                                <td class="px-2 sm:px-3 md:px-4 py-2 sm:py-3 text-xs sm:text-sm">
                                                    <span class="<%= transaction.type === 'credit' ? 'text-green-600' : 'text-red-600' %>">
                                                        <%= transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1) %>
                                                    </span>
                                                </td>
                                                <td class="px-2 sm:px-3 md:px-4 py-2 sm:py-3 text-right text-xs sm:text-sm">
                                                    <span class="<%= transaction.type === 'credit' ? 'text-green-600' : 'text-red-600' %> font-medium">
                                                        <%= transaction.type === 'credit' ? '+' : '-' %>â‚¹<%= transaction.amount.toFixed(2) %>
                                                    </span>
                                                </td>
                                                <td class="px-2 sm:px-3 md:px-4 py-2 sm:py-3 text-right text-xs sm:text-sm">
                                                    â‚¹<%= (transaction.balance || 0).toFixed(2) %>
                                                </td>
                                                <td class="px-2 sm:px-3 md:px-4 py-2 sm:py-3 text-center">
                                                    <span class="px-2 py-1 rounded-full text-xs
                                                        <%= transaction.status === 'success' ? 'bg-green-100 text-green-800' : 
                                                            transaction.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
                                                            'bg-red-100 text-red-800' %>">
                                                        <%= transaction.status.charAt(0).toUpperCase() + transaction.status.slice(1) %>
                                                    </span>
                                                </td>
                                            </tr>
                                        <% }); %>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                        
                        <!-- Mobile View (Card Layout) - Improved mobile cards -->
                        <div class="sm:hidden">
                            <div class="space-y-3">
                                <% if (transactions.length === 0) { %>
                                    <div class="text-center py-4 text-gray-500">No transactions found</div>
                                <% } else { %>
                                    <% transactions.forEach(transaction => { %>
                                        <div class="border rounded-lg p-3 hover:bg-gray-50 transition shadow-sm">
                                            <div class="flex justify-between items-center mb-2">
                                                <div class="text-xs text-gray-500">
                                                    <%= new Date(transaction.createdAt).toLocaleDateString() %>, 
                                                    <%= new Date(transaction.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %>
                                                </div>
                                                <span class="px-2 py-1 rounded-full text-xs
                                                    <%= transaction.status === 'success' ? 'bg-green-100 text-green-800' : 
                                                        transaction.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
                                                        'bg-red-100 text-red-800' %>">
                                                    <%= transaction.status.charAt(0).toUpperCase() + transaction.status.slice(1) %>
                                                </span>
                                            </div>
                                            <div class="mb-1 font-medium text-sm truncate"><%= transaction.description %></div>
                                            <div class="flex justify-between items-center">
                                                <span class="<%= transaction.type === 'credit' ? 'text-green-600' : 'text-red-600' %> text-sm">
                                                    <%= transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1) %>
                                                </span>
                                                <div>
                                                    <span class="<%= transaction.type === 'credit' ? 'text-green-600' : 'text-red-600' %> text-sm font-bold">
                                                        <%= transaction.type === 'credit' ? '+' : '-' %>â‚¹<%= transaction.amount.toFixed(2) %>
                                                    </span>
                                                    <div class="text-xs text-gray-500 text-right">
                                                        Balance: â‚¹<%= (transaction.balance || 0).toFixed(2) %>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    <% }); %>
                                <% } %>
                            </div>
                        </div>
                        
                        <!-- Pagination Controls - Both mobile and desktop -->
                        <% if (pagination.totalPages > 0) { %>
                            <div class="mt-5 flex flex-col sm:flex-row justify-between items-center">
                                <div class="text-xs sm:text-sm text-gray-600 mb-3 sm:mb-0">
                                    Showing <%= (pagination.currentPage - 1) * (parseInt(pagination.limit) || 5) + 1 %> to 
                                    <%= Math.min(pagination.currentPage * (parseInt(pagination.limit) || 5), pagination.totalTransactions) %> 
                                    of <%= pagination.totalTransactions %> entries
                                </div>
                                
                                <div class="flex space-x-1 sm:space-x-2">
                                    <!-- First Page -->
                                    <a href="<%= pagination.currentPage > 1 ? `/wallet?page=1&limit=${pagination.limit}` : '#' %>" 
                                       class="pagination-btn <%= pagination.currentPage > 1 ? 'pagination-btn-inactive' : 'pagination-btn-disabled' %>">
                                        <i class="fas fa-angle-double-left"></i>
                                    </a>
                                    
                                    <!-- Previous Page -->
                                    <a href="<%= pagination.hasPrevPage ? `/wallet?page=${pagination.prevPage}&limit=${pagination.limit}` : '#' %>" 
                                       class="pagination-btn <%= pagination.hasPrevPage ? 'pagination-btn-inactive' : 'pagination-btn-disabled' %>">
                                        <i class="fas fa-angle-left"></i>
                                    </a>
                                    
                                    <!-- Page Numbers -->
                                    <% 
                                    let startPage = Math.max(1, pagination.currentPage - 1);
                                    let endPage = Math.min(pagination.totalPages, startPage + 2);
                                    if (endPage - startPage < 2) startPage = Math.max(1, endPage - 2);
                                    
                                    for (let i = startPage; i <= endPage; i++) { %>
                                        <a href="/wallet?page=<%= i %>&limit=<%= pagination.limit %>" 
                                           class="pagination-btn <%= i == pagination.currentPage ? 'pagination-btn-active' : 'pagination-btn-inactive' %>">
                                            <%= i %>
                                        </a>
                                    <% } %>
                                    
                                    <!-- Next Page -->
                                    <a href="<%= pagination.hasNextPage ? `/wallet?page=${pagination.nextPage}&limit=${pagination.limit}` : '#' %>" 
                                       class="pagination-btn <%= pagination.hasNextPage ? 'pagination-btn-inactive' : 'pagination-btn-disabled' %>">
                                        <i class="fas fa-angle-right"></i>
                                    </a>
                                    
                                    <!-- Last Page -->
                                    <a href="<%= pagination.currentPage < pagination.totalPages ? `/wallet?page=${pagination.totalPages}&limit=${pagination.limit}` : '#' %>" 
                                       class="pagination-btn <%= pagination.currentPage < pagination.totalPages ? 'pagination-btn-inactive' : 'pagination-btn-disabled' %>">
                                        <i class="fas fa-angle-double-right"></i>
                                    </a>
                                </div>
                            </div>
                        <% } %>
                    </div>
                </div>
                
                <!-- Empty State for No Transactions - Only visible when no transactions exist at all -->
                <% if (pagination.totalTransactions === 0) { %>
                <div class="bg-white rounded-lg shadow p-6 text-center">
                    <i class="fas fa-receipt text-gray-300 text-5xl mb-3"></i>
                    <h3 class="text-lg font-medium text-gray-700">No transactions yet</h3>
                    <p class="text-gray-500 mt-1">Add money to your wallet to get started</p>
                    <button onclick="handleAddMoney()" class="mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded transition">
                        <i class="fas fa-plus-circle mr-2"></i>Add Money Now
                    </button>
                </div>
                <% } %>
            </div>
        </div>
    </main>

    <script>
    function changeLimit(limit) {
        window.location.href = `/wallet?page=1&limit=${limit}`;
    }
    
    async function handleAddMoney() {
        // Determine if we're on mobile
        const isMobile = window.innerWidth < 768;
        
        const { value: amount } = await Swal.fire({
            title: 'Add Money to Wallet',
            input: 'number',
            inputLabel: 'Enter amount to add (â‚¹)',
            inputPlaceholder: 'Enter amount',
            showCancelButton: true,
            customClass: {
                container: isMobile ? 'my-swal-container' : '',
                popup: isMobile ? 'my-swal-popup' : '',
                input: 'text-center'
            },
            inputValidator: (value) => {
                if (!value) {
                    return 'Please enter an amount!';
                }
                if (parseFloat(value) <= 0) {
                    return 'Amount must be greater than 0!';
                }
                if (parseFloat(value) > 50000) {
                    return 'Maximum amount per transaction is â‚¹50,000';
                }
            }
        });

        if (amount) {
            showLoading('Processing payment...');
            try {
                const response = await fetch('/wallet/add-money', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ amount: parseFloat(amount) })
                });

                const data = await response.json();
                if (data.success) {
                    document.getElementById('balance').textContent = data.balance.toFixed(2);
                    await showSuccess(`Successfully added â‚¹${amount} to your wallet`);
                    location.reload();
                } else {
                    await Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: data.message || 'Error processing request',
                        customClass: {
                            popup: isMobile ? 'my-swal-popup' : ''
                        }
                    });
                }
            } catch (error) {
                await handleError(error);
            }
        }
    }

    async function handleWithdraw() {
        // Determine if we're on mobile
        const isMobile = window.innerWidth < 768;
        const currentBalance = parseFloat(document.getElementById('balance').textContent);
        
        // Early check for zero balance
        if (currentBalance <= 0) {
            await Swal.fire({
                icon: 'warning',
                title: 'No Balance',
                text: 'You have no funds to withdraw.',
                customClass: {
                    popup: isMobile ? 'my-swal-popup' : ''
                }
            });
            return;
        }
        
        const { value: amount } = await Swal.fire({
            title: 'Withdraw Money',
            input: 'number',
            inputLabel: 'Enter amount to withdraw (â‚¹)',
            inputPlaceholder: `Max: â‚¹${currentBalance.toFixed(2)}`,
            showCancelButton: true,
            customClass: {
                container: isMobile ? 'my-swal-container' : '',
                popup: isMobile ? 'my-swal-popup' : '',
                input: 'text-center'
            },
            inputValidator: (value) => {
                if (!value) {
                    return 'Please enter an amount!';
                }
                if (parseFloat(value) <= 0) {
                    return 'Amount must be greater than 0!';
                }
                if (parseFloat(value) > currentBalance) {
                    return 'Insufficient balance!';
                }
            }
        });

        if (amount) {
            showLoading('Processing withdrawal...');
            try {
                const response = await fetch('/wallet/withdraw', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ amount: parseFloat(amount) })
                });

                const data = await response.json();
                if (data.success) {
                    document.getElementById('balance').textContent = data.balance.toFixed(2);
                    await showSuccess(`Successfully withdrawn â‚¹${amount} from your wallet`);
                    location.reload();
                } else {
                    await Swal.fire({
                        icon: 'error',
                        title: 'Withdrawal Failed',
                        text: data.message || 'Error processing withdrawal',
                        customClass: {
                            popup: isMobile ? 'my-swal-popup' : ''
                        }
                    });
                }
            } catch (error) {
                await handleError(error, 'Error processing withdrawal. Please try again later.');
            }
        }
    }

    // Improved loading state with animation
    function showLoading(message = 'Processing...') {
        Swal.fire({
            title: message,
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => {
                Swal.showLoading();
            },
            customClass: {
                popup: window.innerWidth < 768 ? 'my-swal-popup' : ''
            }
        });
    }

    // Enhanced error handler function
    async function handleError(error, customMessage = 'Something went wrong!') {
        console.error('Error:', error);
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: customMessage,
            confirmButtonColor: '#3085d6',
            customClass: {
                popup: window.innerWidth < 768 ? 'my-swal-popup' : ''
            }
        });
    }

    // Enhanced success handler function
    async function showSuccess(message) {
        await Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: message,
            showConfirmButton: false,
            timer: 1500,
            customClass: {
                popup: window.innerWidth < 768 ? 'my-swal-popup' : ''
            }
        });
    }

    // Adjust SweetAlert sizing based on screen size and orientation
    function adjustSweetAlertSize() {
        const isMobile = window.innerWidth < 768;
        if (isMobile) {
            // Check if style already exists
            let styleElement = document.getElementById('swal-mobile-styles');
            if (!styleElement) {
                styleElement = document.createElement('style');
                styleElement.id = 'swal-mobile-styles';
                styleElement.innerHTML = `
                    .my-swal-popup { 
                        width: 90% !important; 
                        font-size: 0.9rem !important; 
                        padding: 0.75rem !important;
                    }
                    .my-swal-content { 
                        padding: 0.5rem !important; 
                    }
                    .swal2-input {
                        font-size: 1.1em !important;
                        padding: 0.5em 0.75em !important;
                    }
                `;
                document.head.appendChild(styleElement);
            }
        }
    }

    // Listen for screen orientation changes
    window.addEventListener('orientationchange', adjustSweetAlertSize);
    
    // Initial setup on page load
    window.addEventListener('DOMContentLoaded', () => {
        adjustSweetAlertSize();
        
        // Add touch feedback for mobile
        document.querySelectorAll('button, a').forEach(element => {
            if (!element.classList.contains('touch-setup')) {
                element.classList.add('touch-setup');
                element.addEventListener('touchstart', function() {
                    this.style.transform = 'scale(0.98)';
                });
                element.addEventListener('touchend', function() {
                    this.style.transform = 'scale(1)';
                });
            }
        });
    });
    </script>
    <%- include('../../views/partials/user/footer') %>
</body>
</html>