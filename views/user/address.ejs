<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Address Book</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Tailwind Animation Plugin -->
    <script src="https://cdn.jsdelivr.net/npm/tailwindcss-animatecss@1.0.7/dist/tailwindcss-animatecss.min.js"></script>
    <!-- Font Awesome --> 
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- AOS Animation -->
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <style>
        :root {
            --primary-color: #ffd33d;
        }
        body {
            font-family: 'Inter', sans-serif;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            background-color: #fafafa;
        }
        .address-card {
            transition: all 0.3s ease;
            background: white;
            border: 1px solid #e5e7eb;
            position: relative;
            border-radius: 0.75rem;
            padding: 1.5rem;
        }
        .address-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            border-color: var(--primary-color);
        }
        .default-badge {
            position: absolute;
            top: 0;
            left: 0;
            background-color: var(--primary-color);
            color: #000;
            font-weight: 600;
            font-size: 0.875rem;
            padding: 0.5rem 1rem;
            border-top-left-radius: 0.75rem;
            z-index: 10;
        }
        .action-buttons {
            position: absolute;
            top: 0.75rem;
            right: 0.75rem;
            display: flex;
            gap: 1rem;
            z-index: 20;
        }
        .address-type-icon {
            color: var(--primary-color);
            font-size: 1.25rem;
            margin-right: 0.5rem;
        }
        .address-info {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            margin-top: 1rem;
        }
        .address-info p {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: #4B5563;
        }
        .address-info i {
            color: var(--primary-color);
            width: 1.25rem;
            text-align: center;
        }
        .set-default-btn {
            margin-top: 1rem;
            width: 100%;
            padding: 0.5rem;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            color: #4B5563;
            background-color: #F3F4F6;
            transition: all 0.3s ease;
        }
        .set-default-btn:hover:not(:disabled) {
            background-color: var(--primary-color);
            color: #000;
        }
        .set-default-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .btn-primary {
            background-color: var(--primary-color);
            color: #000;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            background-color: #ffda5a;
        }
        .icon-bounce {
            animation: bounce 2s infinite;
        }
        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
        }
        main {
            flex-grow: 1;
            padding-top: 2rem;
            padding-bottom: 2rem;
        }
        .address-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            padding: 1rem;
        }
    </style>
</head>
<body>
    <%- include("../../views/partials/user/header") %>
    
    <!-- Breadcrumb with enhanced styling -->
    <div class="w-full  border-b ">
        <div class="max-w-7xl mx-auto px-4">
            <nav class="py-4">
                <ol class="flex items-center space-x-2 text-sm">
                    <li><a href="/" class="text-gray-600 hover:text-[#ffd33d] transition-colors duration-200">
                        <i class="fas fa-home mr-1"></i> Home</a></li>
                    <li><i class="fas fa-chevron-right text-gray-400 text-xs"></i></li>
                    <li><a href="/profile" class="text-gray-600 hover:text-[#ffd33d] transition-colors duration-200">
                        <i class="fas fa-user mr-1"></i> Profile</a></li>
                    <li><i class="fas fa-chevron-right text-gray-400 text-xs"></i></li>
                    <li class="text-[#ffd33d] font-medium">
                        <i class="fas fa-map-marker-alt mr-1"></i> Address</li>
                </ol>
            </nav>
        </div>
    </div>

    <main class="w-full bg-gray-50">
        <div class="max-w-7xl mx-auto px-4">
            <div class="grid grid-cols-12 gap-8 py-6">
                <!-- Include Profile Sidebar -->
                <div class="col-span-12 lg:col-span-3">
                    <%- include("../partials/user/profileSidebar", { currentPage: 'address' }) %>
                </div>

                <!-- Address Content -->
                <div class="col-span-12 lg:col-span-9">
                    <div class="bg-white rounded-xl shadow-sm p-6">
                        <div class="flex flex-col sm:flex-row justify-between items-center mb-8 gap-4">
                            <div class="flex items-center" data-aos="fade-right">
                                <div class="w-12 h-12 rounded-full bg-[#ffd33d] bg-opacity-20 flex items-center justify-center mr-4">
                                    <i class="fas fa-map-marked-alt text-[#ffd33d] text-xl icon-bounce"></i>
                                </div>
                                <h1 class="text-2xl font-semibold text-gray-800">Address Book</h1>
                            </div>
                            <a href="/addAddress" class="btn-primary rounded-full px-6 py-3 flex items-center space-x-2 transform hover:scale-105 transition-all duration-300" data-aos="fade-left">
                                <i class="fas fa-plus-circle text-lg"></i>
                                <span class="font-medium">Add New Address</span>
                            </a>
                        </div>

                        <div class="address-grid">
                            <% if (addresses && addresses.address && addresses.address.length > 0) { %>
                                <% addresses.address.forEach((address, index) => { %>
                                    <div class="address-card <%= address.default ? 'border-primary' : 'border-gray-200' %>" data-aos="fade-up" data-aos-delay="<%= index * 100 %>">
                                        <% if (address.default) { %>
                                            <div class="default-badge">
                                                <i class="fas fa-check-circle mr-1"></i> Default Address
                                            </div>
                                        <% } %>
                                        
                                        <div class="action-buttons">
                                            <a href="/geteditaddress/<%= address._id %>" 
                                               class="text-gray-400 hover:text-[#ffd33d] transition-colors duration-200">
                                                <i class="fas fa-edit text-lg"></i>
                                            </a>
                                            <button class="delete-address text-gray-400 hover:text-red-500 transition-colors duration-200" 
                                                    data-address-id="<%= address._id %>">
                                                <i class="fas fa-trash-alt text-lg"></i>
                                            </button>
                                        </div>

                                        <div class="address-info">
                                            <div class="flex items-center mb-2">
                                                <% if (address.addressType.toLowerCase().includes('home')) { %>
                                                    <i class="fas fa-home address-type-icon"></i>
                                                <% } else if (address.addressType.toLowerCase().includes('office')) { %>
                                                    <i class="fas fa-building address-type-icon"></i>
                                                <% } else { %>
                                                    <i class="fas fa-map-marker-alt address-type-icon"></i>
                                                <% } %>
                                                <h4 class="text-lg font-medium text-gray-900">
                                                    <%= address.addressType %>
                                                </h4>
                                            </div>
                                            <p><i class="fas fa-user"></i><%= address.name %></p>
                                            <% if (address.apartment) { %>
                                                <p><i class="fas fa-building"></i><%= address.apartment %></p>
                                            <% } %>
                                            <p><i class="fas fa-map-marker-alt"></i><%= address.street %></p>
                                            <p><i class="fas fa-city"></i><%= address.city %>, <%= address.postalCode %></p>
                                            <p><i class="fas fa-phone"></i><%= address.phone %></p>
                                            <% if (address.landMark) { %>
                                                <p class="text-sm"><i class="fas fa-landmark"></i><%= address.landMark %></p>
                                            <% } %>
                                        </div>

                                        <% if (!address.default) { %>
                                            <button 
                                                class="set-default-btn text-gray-600 hover:text-primary transition-colors"
                                                data-address-id="<%= address._id %>"
                                                title="Set as default address">
                                                <i class="fas fa-star mr-1"></i>
                                                Set as Default
                                            </button>
                                        <% } %>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="col-span-full text-center py-16" data-aos="fade-up">
                                    <div class="w-24 h-24 mx-auto bg-[#ffd33d] bg-opacity-20 rounded-full flex items-center justify-center mb-6">
                                        <i class="fas fa-map-marker-alt text-4xl text-[#ffd33d] icon-bounce"></i>
                                    </div>
                                    <h3 class="text-xl font-medium text-gray-800 mb-4">No addresses found</h3>
                                    <p class="text-gray-500 mb-6">Add your first address to get started</p>
                                    <a href="/addAddress" class="btn-primary rounded-full px-8 py-3 inline-flex items-center space-x-2">
                                        <i class="fas fa-plus-circle"></i>
                                        <span>Add Address</span>
                                    </a>
                                </div>
                            <% } %>
                        </div>

                        <!-- Enhanced Pagination -->
                        <% if (pagination && pagination.totalPages > 1) { %>
                            <div class="mt-8 flex justify-center items-center space-x-2" data-aos="fade-up">
                                <% if (pagination.hasPrevPage) { %>
                                    <a href="/address?page=<%= pagination.prevPage %>" 
                                       class="px-4 py-2 rounded-full border border-gray-200 text-sm text-gray-600 hover:bg-[#ffd33d] hover:border-[#ffd33d] hover:text-black transition-all duration-300">
                                        <i class="fas fa-chevron-left mr-1"></i> Previous
                                    </a>
                                <% } %>

                                <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                                    <a href="/address?page=<%= i %>" 
                                       class="<%= i === pagination.currentPage 
                                           ? 'px-4 py-2 rounded-full bg-[#ffd33d] text-black font-medium' 
                                           : 'px-4 py-2 rounded-full border border-gray-200 text-gray-600 hover:bg-[#ffd33d] hover:border-[#ffd33d] hover:text-black' %> transition-all duration-300">
                                        <%= i %>
                                    </a>
                                <% } %>

                                <% if (pagination.hasNextPage) { %>
                                    <a href="/address?page=<%= pagination.nextPage %>" 
                                       class="px-4 py-2 rounded-full border border-gray-200 text-sm text-gray-600 hover:bg-[#ffd33d] hover:border-[#ffd33d] hover:text-black transition-all duration-300">
                                        Next <i class="fas fa-chevron-right ml-1"></i>
                                    </a>
                                <% } %>
                            </div>

                            <!-- Pagination Info -->
                            <div class="text-center text-sm text-gray-500 mt-4">
                                Showing <%= pagination.startIndex %> to <%= pagination.endIndex %> of <%= pagination.totalItems %> addresses
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        // Initialize AOS
        AOS.init({
            duration: 800,
            once: true,
            offset: 100
        });

        document.addEventListener('DOMContentLoaded', function() {
            // Delete Address Handler with enhanced UI
            const deleteButtons = document.querySelectorAll('.delete-address');
            deleteButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const addressId = this.getAttribute('data-address-id');
                    
                    Swal.fire({
                        title: 'Delete Address?',
                        text: 'This action cannot be undone',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#ffd33d',
                        cancelButtonColor: '#ef4444',
                        confirmButtonText: '<i class="fas fa-trash-alt mr-2"></i>Yes, delete it!',
                        cancelButtonText: '<i class="fas fa-times mr-2"></i>Cancel',
                        background: '#fff',
                        iconColor: '#ffd33d',
                        showClass: {
                            popup: 'animate__animated animate__fadeInDown'
                        },
                        hideClass: {
                            popup: 'animate__animated animate__fadeOutUp'
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch(`/deleteAddress/${addressId}`, { 
                                method: 'DELETE',
                                credentials: 'include',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    const addressCard = this.closest('.address-card');
                                    addressCard.style.transform = 'scale(0.8)';
                                    addressCard.style.opacity = '0';
                                    setTimeout(() => {
                                        addressCard.remove();
                                    }, 300);

                                    Swal.fire({
                                        title: 'Deleted Successfully!',
                                        text: 'Your address has been removed',
                                        icon: 'success',
                                        confirmButtonColor: '#ffd33d',
                                        iconColor: '#ffd33d'
                                    });
                                } else {
                                    Swal.fire({
                                        title: 'Oops!',
                                        text: data.message || 'Failed to delete address',
                                        icon: 'error',
                                        confirmButtonColor: '#ffd33d'
                                    });
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'An error occurred while deleting the address',
                                    icon: 'error',
                                    confirmButtonColor: '#ffd33d'
                                });
                            });
                        }
                    });
                });
            });

            // Set Default Address Handler with enhanced UI
            const defaultButtons = document.querySelectorAll('.set-default-btn');
            let isProcessing = false;

            defaultButtons.forEach(button => {
                button.addEventListener('click', async function() {
                    if (isProcessing) return;
                    
                    const addressId = this.getAttribute('data-address-id');
                    
                    try {
                        isProcessing = true;
                        defaultButtons.forEach(btn => btn.disabled = true);
                        
                        const result = await Swal.fire({
                        title: 'Set as Default?',
                        text: 'This will be your primary delivery address',
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#ffd33d',
                        cancelButtonColor: '#ef4444',
                        confirmButtonText: '<i class="fas fa-check-circle mr-2"></i>Yes, set as default!',
                        cancelButtonText: '<i class="fas fa-times mr-2"></i>Cancel',
                        background: '#fff',
                        iconColor: '#ffd33d',
                        showClass: {
                            popup: 'animate__animated animate__fadeInDown'
                        },
                        hideClass: {
                            popup: 'animate__animated animate__fadeOutUp'
                        }
                        });

                        if (result.isConfirmed) {
                            this.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i><span>Setting as default...</span>';
                            
                            const response = await fetch(`/setDefaultAddress/${addressId}`, {
                                method: 'POST',
                                credentials: 'include',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });

                            const data = await response.json();

                                if (!response.ok) {
                                throw new Error(data.message || 'Failed to set default address');
                                }

                                if (data.success) {
                                await Swal.fire({
                                        title: 'Success!',
                                        text: 'Default address updated successfully',
                                        icon: 'success',
                                        confirmButtonColor: '#ffd33d',
                                        iconColor: '#ffd33d'
                                });
                                        window.location.reload();
                                } else {
                                    throw new Error(data.message || 'Failed to set default address');
                                }
                        }
                    } catch (error) {
                                console.error('Error:', error);
                                Swal.fire({
                                    title: 'Error!',
                                    text: error.message || 'An error occurred while setting default address',
                                    icon: 'error',
                                    confirmButtonColor: '#ffd33d'
                                });
                        this.innerHTML = '<i class="fas fa-check-circle mr-2"></i><span>Set as Default</span>';
                    } finally {
                        isProcessing = false;
                            defaultButtons.forEach(btn => btn.disabled = false);
                        }
                });
            });
        });

        async function setDefaultAddress(addressId) {
            try {
                // Show loading state
                Swal.fire({
                    title: 'Setting Default Address',
                    text: 'Please wait...',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    willOpen: () => {
                        Swal.showLoading();
                    }
                });

                const response = await fetch(`/setDefaultAddress/${addressId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();

                if (response.ok && data.success) {
                    // Success message
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Default address updated successfully',
                        timer: 1500,
                        showConfirmButton: false
                    });
                    
                    // Reload the page to show updated default status
                    window.location.reload();
                } else {
                    throw new Error(data.message || 'Failed to set default address');
                }

            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: error.message || 'Something went wrong while setting default address',
                    confirmButtonColor: '#3085d6'
                });
            }
        }

        // Add this to handle the default address button click
        document.addEventListener('DOMContentLoaded', function() {
            const defaultButtons = document.querySelectorAll('.set-default-btn');
            
            defaultButtons.forEach(button => {
                button.addEventListener('click', async (e) => {
                    e.preventDefault();
                    const addressId = button.dataset.addressId;
                    await setDefaultAddress(addressId);
                });
            });
        });
    </script>

    <%- include("../../views/partials/user/footer") %>
</body>
</html>
