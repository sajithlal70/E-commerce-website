<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

<%- include("../../views/partials/user/header") %>

<div class="container-fluid">
  <div class="row px-xl-5">
      <div class="col-12">
          <nav class="breadcrumb bg-light mb-30">
              <a class="breadcrumb-item text-dark" href="/">Home</a>
              <a class="breadcrumb-item text-dark" href="/shop">Shop</a>
              <span class="breadcrumb-item active">Shopping Cart</span>
          </nav>
      </div>
  </div>
</div>

<!-- Cart Start -->

<div class="container-fluid">
  <div class="row px-xl-5">
      <div class="col-lg-8 col-md-12 mb-5">
        <div class="table-responsive">
          <table class="table table-light table-borderless table-hover text-center mb-0">
              <thead class="thead-dark">
                  <tr>
                      <th class="align-middle text-left pl-4">Products</th>
                      <th class="align-middle text-center">Price</th>
                      <th class="align-middle text-center">Quantity</th>
                      <th class="align-middle text-center">Total</th>
                      <th class="align-middle text-right pr-4">Remove</th>
                  </tr>
              </thead>
              <tbody class="align-middle">
                  <% if (cart && cart.items && cart.items.length > 0) { %>
                      <% cart.items.forEach((item) => { %>
                          <tr>
                              <td class="align-middle pl-4">
                                  <div class="d-flex align-items-center flex-wrap">
                                      <img src="/uploads/products/<%= item.product.productImage[0] %>" 
                                           alt="<%= item.product ? item.product.productName : 'Product' %>" 
                                           class="object-cover rounded" 
                                           style="width: 50px; height: 50px; margin-right: 8px;">
                                      <span class="text-gray-800 font-medium text-base" style="font-size: 14px;">
                                          <%= item.product ? item.product.productName : 'Unknown Product' %>
                                      </span>
                                  </div>
                              </td>
                              <td class="align-middle text-center">
                                  ₹ <%= item.product && item.product.salePrice 
                                        ? item.product.salePrice.toFixed(2) 
                                        : '0.00' %>
                              </td>
                              <td class="align-middle text-center">
                                  <div class="input-group quantity mx-auto" style="max-width: 120px; height: 30px;">
                                      <button class="btn btn-sm btn-primary btn-minus" 
                                              style="width: 30px; height: 30px; font-size: 14px;" 
                                              data-product-id="<%= item.product ? item.product._id : '' %>">
                                          <i class="fa fa-minus"></i>
                                      </button>
                                      <input type="text" 
                                             class="form-control form-control-sm bg-secondary border-0 text-center" 
                                             value="<%= Math.max(1, item.quantity || 1) %>"
                                             min="1"
                                             style="width: 40px; height: 30px; font-size: 14px;" 
                                             data-product-id="<%= item.product ? item.product._id : '' %>">
                                      <button class="btn btn-sm btn-primary btn-plus" 
                                              style="width: 30px; height: 30px; font-size: 14px;" 
                                              data-product-id="<%= item.product ? item.product._id : '' %>">
                                          <i class="fa fa-plus"></i>
                                      </button>
                                  </div>
                              </td>
                              <td class="align-middle text-center">
                                  ₹ <%= item.product && item.product.salePrice 
                                        ? (item.product.salePrice * Math.max(1, item.quantity || 1)).toFixed(2) 
                                        : '0.00' %>
                              </td>
                              <td class="align-middle text-right pr-4">
                                  <button class="btn btn-sm btn-danger remove-from-cart" 
                                          data-product-id="<%= item.product ? item.product._id : '' %>">
                                      <i class="fa fa-times"></i>
                                  </button>
                              </td>
                          </tr>
                      <% }); %>
                  <% } else { %>
                      <tr>
                          <td colspan="5" class="text-center">Your cart is empty</td>
                      </tr>
                  <% } %>
              </tbody>
          </table>
        </div>
        
        <!-- Mobile Cart View (Only visible on xs and sm screens) -->
        <div class="d-md-none mt-4">
          <% if (cart && cart.items && cart.items.length > 0) { %>
              <% cart.items.forEach((item) => { %>
                  <div class="card mb-3">
                      <div class="card-body">
                          <div class="d-flex mb-2">
                            <img src="/uploads/products/<%= item.product.productImage[0] %>" 
                            alt="<%= item.product ? item.product.productName : 'Product' %>" 
                            class="object-cover rounded" 
                            style="width: 50px; height: 50px; margin-right: 8px;">
                              <div>
                                  <h6 class="mb-1"><%= item.product ? item.product.productName : 'Unknown Product' %></h6>
                                  <p class="mb-0">₹ <%= item.product && item.product.salePrice 
                                      ? item.product.salePrice.toFixed(2) 
                                      : '0.00' %></p>
                              </div>
                          </div>
                          <div class="d-flex justify-content-between align-items-center">
                              <div class="input-group quantity" style="max-width: 120px;">
                                  <button class="btn btn-sm btn-primary btn-minus" 
                                          data-product-id="<%= item.product ? item.product._id : '' %>">
                                      <i class="fa fa-minus"></i>
                                  </button>
                                  <input type="text" 
                                        class="form-control form-control-sm bg-secondary border-0 text-center" 
                                        value="<%= Math.max(1, item.quantity || 1) %>"
                                        min="1"
                                        data-product-id="<%= item.product ? item.product._id : '' %>">
                                  <button class="btn btn-sm btn-primary btn-plus" 
                                          data-product-id="<%= item.product ? item.product._id : '' %>">
                                      <i class="fa fa-plus"></i>
                                  </button>
                              </div>
                              <p class="mb-0 font-weight-bold">₹ <%= item.product && item.product.salePrice 
                                  ? (item.product.salePrice * Math.max(1, item.quantity || 1)).toFixed(2) 
                                  : '0.00' %></p>
                              <button class="btn btn-sm btn-danger remove-from-cart" 
                                      data-product-id="<%= item.product ? item.product._id : '' %>">
                                  <i class="fa fa-times"></i>
                              </button>
                          </div>
                      </div>
                  </div>
              <% }); %>
          <% } else { %>
              <div class="card">
                  <div class="card-body text-center">
                      Your cart is empty
                  </div>
              </div>
          <% } %>
        </div>
      </div>
      
      <div class="col-lg-4 col-md-12">
          <h5 class="section-title position-relative text-uppercase mb-3"><span class="bg-secondary pr-3">Cart Summary</span></h5>
          <div class="bg-light p-30 mb-5">
              <div class="border-bottom pb-2">
                  <div class="d-flex justify-content-between mb-3">
                      <h6>Subtotal</h6>
                      <h6>₹ <%= subtotal ? subtotal.toFixed(2) : '0.00' %></h6>
                  </div>
                  <div class="d-flex justify-content-between">
                      <h6 class="font-weight-medium">Shipping</h6>
                      <h6 class="font-weight-medium">₹ <%= shippingCost ? shippingCost.toFixed(2) : '0.00' %></h6>
                  </div>
              </div>
              <div class="pt-2">
                  <div class="d-flex justify-content-between mt-2">
                      <h5>Total</h5>
                      <h5>₹ <%= total ? total.toFixed(2) : '0.00' %></h5>
                  </div>
                  <a href="/Checkout" class="text-decoration-none">
                      <button class="btn btn-block btn-primary font-weight-bold my-3 py-3">Proceed To Checkout</button>
                  </a>
              </div>
          </div>
      </div>
  </div>
</div>

<script>
    const updateCartSummary = (data) => {
    const subtotalEl = document.querySelector('.d-flex.justify-content-between.mb-3 h6:last-child');
    const shippingEl = document.querySelector('.d-flex.justify-content-between .font-weight-medium:last-child');
    const totalEl = document.querySelector('.d-flex.justify-content-between.mt-2 h5:last-child');
    
    if (subtotalEl) subtotalEl.textContent = `₹ ${data.subtotal.toFixed(2)}`;
    if (shippingEl) shippingEl.textContent = `₹ ${data.shippingCost.toFixed(2)}`;
    if (totalEl) totalEl.textContent = `₹ ${data.total.toFixed(2)}`;

    // Get current page from URL or default to 1
    const urlParams = new URLSearchParams(window.location.search);
    const currentPage = urlParams.get('page') || 1;
    
    // Reload with the current page
    window.location.href = `/cart?page=${currentPage}`;
};
</script>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // Cart summary update function
    const updateCartSummary = async (data) => {
        try {
            const subtotalEl = document.querySelector('.d-flex.justify-content-between.mb-3 h6:last-child');
            const shippingEl = document.querySelector('.d-flex.justify-content-between .font-weight-medium:last-child');
            const totalEl = document.querySelector('.d-flex.justify-content-between.mt-2 h5:last-child');
            
            if (subtotalEl) subtotalEl.textContent = `₹ ${data.subtotal.toFixed(2)}`;
            if (shippingEl) shippingEl.textContent = `₹ ${data.shippingCost.toFixed(2)}`;
            if (totalEl) totalEl.textContent = `₹ ${data.total.toFixed(2)}`;
        } catch (error) {
            console.error('Error updating cart summary:', error);
            throw new Error('Failed to update cart summary');
        }
    };

    // Quantity validation function with stricter enforcement
    const validateQuantity = (quantity) => {
        const parsedQuantity = parseInt(quantity) || 1; // Default to 1 if parsing fails
        return Math.max(1, Math.min(5, parsedQuantity)); // Ensure between 1 and 5
    };

    // Update price display function
    const updatePriceDisplay = (row, quantity, price) => {
        try {
            const totalEl = row.querySelector('td:nth-child(4)');
            if (totalEl) {
                totalEl.textContent = `₹ ${(price * quantity).toFixed(2)}`;
            }
        } catch (error) {
            console.error('Error updating price display:', error);
            throw new Error('Failed to update price display');
        }
    };

    // Handle quantity updates
    document.querySelectorAll('.quantity').forEach(quantityGroup => {
        const input = quantityGroup.querySelector('input');
        const plusBtn = quantityGroup.querySelector('.btn-plus');
        const minusBtn = quantityGroup.querySelector('.btn-minus');
        const productId = input.dataset.productId;
        
        // Initialize with valid quantity (1-5)
        let currentQuantity = Math.max(1, Math.min(5, parseInt(input.value) || 1));
        input.value = currentQuantity;

        const updateQuantity = async (newQuantity) => {
            try {
                // Validate quantity
                if (newQuantity < 1) {
                    await Swal.fire({
                        icon: 'warning',
                        title: 'Invalid Quantity',
                        text: 'Minimum 1 unit per product required',
                        showConfirmButton: true
                    });
                    input.value = 1;
                    return;
                }
                
                if (newQuantity > 5) {
                    await Swal.fire({
                        icon: 'warning',
                        title: 'Invalid Quantity',
                        text: 'Maximum 5 units per product allowed',
                        showConfirmButton: true
                    });
                    input.value = 5;
                    return;
                }

                const response = await fetch('/cart/update', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId, quantity: newQuantity })
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.message || 'Failed to update quantity');
                }

                // Update UI elements
                currentQuantity = newQuantity;
                input.value = currentQuantity;

                const row = quantityGroup.closest('tr');
                if (row) {
                    const price = parseFloat(row.querySelector('td:nth-child(2)').textContent.replace('₹', ''));
                    updatePriceDisplay(row, newQuantity, price);
                }
                
                await updateCartSummary(data);
                window.location.reload();

            } catch (error) {
                console.error('Error:', error);
                input.value = currentQuantity; // Revert to last valid quantity
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to update quantity',
                    showConfirmButton: true
                });
            }
        };

        // Handle direct input changes
        input.addEventListener('input', (e) => {
            let value = parseInt(e.target.value) || 1;
            if (value < 1) {
                value = 1;
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid Quantity',
                    text: 'Minimum 1 unit per product required',
                    showConfirmButton: true
                });
            } else if (value > 5) {
                value = 5;
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid Quantity',
                    text: 'Maximum 5 units per product allowed',
                    showConfirmButton: true
                });
            }
            e.target.value = value;
        });

        // Handle quantity change after input
        input.addEventListener('change', async (e) => {
            const newQuantity = parseInt(e.target.value) || 1;
            await updateQuantity(newQuantity);
        });

        // Minus button handler
        minusBtn?.addEventListener('click', async (e) => {
            e.preventDefault();
            if (currentQuantity <= 1) {
                await Swal.fire({
                    icon: 'warning',
                    title: 'Minimum Limit Reached',
                    text: 'Minimum 1 unit per product required',
                    showConfirmButton: true
                });
                input.value = 1;
                return;
            }
            await updateQuantity(currentQuantity - 1);
        });

        // Plus button handler
        plusBtn?.addEventListener('click', async (e) => {
            e.preventDefault();
            if (currentQuantity >= 5) {
                await Swal.fire({
                    icon: 'warning',
                    title: 'Maximum Limit Reached',
                    text: 'Maximum 5 units per product allowed',
                    showConfirmButton: true
                });
                input.value = 5;
                return;
            }
            await updateQuantity(currentQuantity + 1);
        });
    });

    // Remove from cart functionality
    document.querySelectorAll('.remove-from-cart').forEach(btn => {
        btn.addEventListener('click', async (e) => {
            e.preventDefault();
            try {
                const productId = e.currentTarget.dataset.productId;
                const rowElement = e.currentTarget.closest('tr') || e.currentTarget.closest('.card');

                if (!rowElement) {
                    throw new Error('Could not find the product row');
                }

                const result = await Swal.fire({
                    title: 'Remove Item?',
                    text: 'Are you sure you want to remove this item from your cart?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, remove it!',
                    cancelButtonText: 'No, keep it'
                });

                if (result.isConfirmed) {
                    const response = await fetch('/cart/remove', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ productId })
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        throw new Error(data.message || 'Failed to remove item');
                    }

                    // Remove row and update UI
                    rowElement.remove();
                    await updateCartSummary(data);

                    await Swal.fire({
                        icon: 'success',
                        title: 'Removed!',
                        text: 'Item has been removed from your cart',
                        showConfirmButton: false,
                        timer: 1500
                    });

                    // Reload if cart is empty
                    if (data.cartEmpty) {
                        window.location.reload();
                    }
                }
            } catch (error) {
                console.error('Error removing item:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to remove item from cart',
                    showConfirmButton: true
                });
            }
        });
    });
});
</script>

<style>
@media (max-width: 767.98px) {
    .table-responsive {
        display: none;
    }
    
    .quantity .btn {
        padding: 0.25rem 0.5rem;
    }
    
    .card {
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    .breadcrumb {
        font-size: 14px;
    }
}

@media (min-width: 768px) {
    .d-md-none {
        display: none !important;
    }
}

@media (max-width: 575.98px) {
    .container-fluid {
        padding-left: 15px;
        padding-right: 15px;
    }
    
    .px-xl-5 {
        padding-left: 0 !important;
        padding-right: 0 !important;
    }
    
    .card-body {
        padding: 0.75rem;
    }
}
</style>

<%- include("../../views/partials/user/footer") %>